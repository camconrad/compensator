/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockGovernor,
  MockGovernorInterface,
} from "../../../contracts/mocks/MockGovernor";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "support",
        type: "uint8",
      },
    ],
    name: "castVote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "hasVoted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "bool",
        name: "voted",
        type: "bool",
      },
    ],
    name: "mockHasVoted",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_forVotes",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_againstVotes",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_abstainVotes",
        type: "uint256",
      },
    ],
    name: "mockProposalVotes",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
    ],
    name: "proposalSnapshot",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "proposalSnapshots",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "proposalStates",
    outputs: [
      {
        internalType: "enum IGovernor.ProposalState",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
    ],
    name: "proposalVotes",
    outputs: [
      {
        internalType: "uint256",
        name: "againstVotes_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "forVotes_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "abstainVotes_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "snapshot",
        type: "uint256",
      },
    ],
    name: "setProposalSnapshot",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
      {
        internalType: "enum IGovernor.ProposalState",
        name: "newState",
        type: "uint8",
      },
    ],
    name: "setProposalState",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
    ],
    name: "state",
    outputs: [
      {
        internalType: "enum IGovernor.ProposalState",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061056a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c806352c160bb1161007157806352c160bb1461018c578063544ffc9c146101c457806356781388146102165780635937909a146102295780635cd691ee1461024957806366ee13b31461026957600080fd5b80630fb26697146100ae5780632060ece2146100c35780632d63f693146101065780633e4f49e6146101395780634385963214610169575b600080fd5b6100c16100bc36600461037c565b61028c565b005b6100c16100d13660046103cc565b60009283526002602090815260408085206001600160a01b039490941685529290529120805460ff1916911515919091179055565b610126610114366004610411565b60009081526001602052604090205490565b6040519081526020015b60405180910390f35b61015c610147366004610411565b60009081526020819052604090205460ff1690565b6040516101309190610440565b61017c610177366004610468565b6102c0565b6040519015158152602001610130565b6100c161019a366004610494565b60009384526003602090815260408086209490945560048152838520929092556005909152912055565b6101fb6101d2366004610411565b600081815260046020908152604080832054600383528184205460059093529220549193909250565b60408051938452602084019290925290820152606001610130565b6100c16102243660046104c6565b6102ed565b6100c16102373660046104f1565b60009182526001602052604090912055565b610126610257366004610411565b60016020526000908152604090205481565b61015c610277366004610411565b60006020819052908152604090205460ff1681565b6000828152602081905260409020805482919060ff191660018360078111156102b7576102b761042a565b02179055505050565b60008281526002602090815260408083206001600160a01b038516845290915290205460ff165b92915050565b60008281526002602090815260408083203384529091529020805460ff1916600190811790915560ff8216900361034857600082815260036020526040812080546001929061033d908490610513565b909155506103789050565b8060ff16600003610378576000828152600460205260408120805460019290610372908490610513565b90915550505b5050565b6000806040838503121561038f57600080fd5b823591506020830135600881106103a557600080fd5b809150509250929050565b80356001600160a01b03811681146103c757600080fd5b919050565b6000806000606084860312156103e157600080fd5b833592506103f1602085016103b0565b91506040840135801515811461040657600080fd5b809150509250925092565b60006020828403121561042357600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b602081016008831061046257634e487b7160e01b600052602160045260246000fd5b91905290565b6000806040838503121561047b57600080fd5b8235915061048b602084016103b0565b90509250929050565b600080600080608085870312156104aa57600080fd5b5050823594602084013594506040840135936060013592509050565b600080604083850312156104d957600080fd5b82359150602083013560ff811681146103a557600080fd5b6000806040838503121561050457600080fd5b50508035926020909101359150565b808201808211156102e757634e487b7160e01b600052601160045260246000fdfea26469706673582212202667aca60cd522db7e6d7a05f3e914239a4a2a0b85a915cf0aeae7382cbf615a64736f6c63430008150033";

type MockGovernorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockGovernorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockGovernor__factory extends ContractFactory {
  constructor(...args: MockGovernorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockGovernor & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockGovernor__factory {
    return super.connect(runner) as MockGovernor__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockGovernorInterface {
    return new Interface(_abi) as MockGovernorInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockGovernor {
    return new Contract(address, _abi, runner) as unknown as MockGovernor;
  }
}
