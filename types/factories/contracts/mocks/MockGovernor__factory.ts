/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockGovernor,
  MockGovernorInterface,
} from "../../../contracts/mocks/MockGovernor";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "support",
        type: "uint8",
      },
    ],
    name: "castVote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
      {
        internalType: "string[]",
        name: "",
        type: "string[]",
      },
      {
        internalType: "bytes[]",
        name: "",
        type: "bytes[]",
      },
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "createProposal",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "hasVoted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "bool",
        name: "voted",
        type: "bool",
      },
    ],
    name: "mockHasVoted",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_forVotes",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_againstVotes",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_abstainVotes",
        type: "uint256",
      },
    ],
    name: "mockProposalVotes",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
    ],
    name: "proposalSnapshot",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "proposalSnapshots",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "proposalStates",
    outputs: [
      {
        internalType: "enum IGovernor.ProposalState",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
    ],
    name: "proposalVotes",
    outputs: [
      {
        internalType: "uint256",
        name: "againstVotes_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "forVotes_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "abstainVotes_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "snapshot",
        type: "uint256",
      },
    ],
    name: "setProposalSnapshot",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
      {
        internalType: "enum IGovernor.ProposalState",
        name: "newState",
        type: "uint8",
      },
    ],
    name: "setProposalState",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
    ],
    name: "state",
    outputs: [
      {
        internalType: "enum IGovernor.ProposalState",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526001600655348015601457600080fd5b506114c3806100246000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806352c160bb1161007157806352c160bb146101b1578063544ffc9c146101cd57806356781388146101ff5780635937909a1461021b5780635cd691ee1461023757806366ee13b314610267576100b4565b80630fb26697146100b95780632060ece2146100d55780632d63f693146100f15780632e768ebd146101215780633e4f49e6146101515780634385963214610181575b600080fd5b6100d360048036038101906100ce91906109d4565b610297565b005b6100ef60048036038101906100ea9190610aaa565b6102fd565b005b61010b60048036038101906101069190610afd565b610392565b6040516101189190610b39565b60405180910390f35b61013b60048036038101906101369190611088565b6103eb565b6040516101489190610b39565b60405180910390f35b61016b60048036038101906101669190610afd565b6104f4565b6040516101789190611206565b60405180910390f35b61019b60048036038101906101969190611221565b610559565b6040516101a89190611270565b60405180910390f35b6101cb60048036038101906101c6919061128b565b6105fd565b005b6101e760048036038101906101e29190610afd565b61069b565b6040516101f6939291906112f2565b60405180910390f35b61021960048036038101906102149190611362565b610725565b005b610235600480360381019061023091906113a2565b6108e6565b005b610251600480360381019061024c9190610afd565b61092a565b60405161025e9190610b39565b60405180910390f35b610281600480360381019061027c9190610afd565b610942565b60405161028e9190611206565b60405180910390f35b6102ab67d15389a35ae5fa2a60c01b610962565b6102bf673e2d41d56852ae6060c01b610962565b8060008084815260200190815260200160002060006101000a81548160ff021916908360078111156102f4576102f361118f565b5b02179055505050565b6103116712f9c450b3dcb8fa60c01b610962565b61032567e51c3ad5b4882dc360c01b610962565b806002600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b60006103a867c0dd69e978eaafb860c01b610962565b6103bc67f7e835cf80a211b860c01b610962565b6103d06752b426eb5f1ed7cb60c01b610962565b60016000838152602001908152602001600020549050919050565b60006104016758b37f79b957d00160c01b610962565b610415672827ef369b9d3b0c60c01b610962565b61042967d9fc278c2af98a0d60c01b610962565b60006006600081548092919061043e90611411565b91905055905061045867c91c03bc16e00b8b60c01b610962565b600080600083815260200190815260200160002060006101000a81548160ff0219169083600781111561048e5761048d61118f565b5b02179055506104a7672b7e05eedde9144a60c01b610962565b4260016000838152602001908152602001600020819055506104d3673a6002e2bbdddfd260c01b610962565b6104e767ecd20cc0830ed84f60c01b610962565b8091505095945050505050565b600061050a679761799e545cf14a60c01b610962565b61051e6790d4dc90d2ac099b60c01b610962565b6105326707af58262e7b259a60c01b610962565b60008083815260200190815260200160002060009054906101000a900460ff169050919050565b600061056f6737d59c2a3cc1c9c060c01b610962565b610583673aae1117e3104d2960c01b610962565b610597670751df9ce41b3f5260c01b610962565b6002600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61061167f70e6223011ddad460c01b610962565b61062567c4eb436e93176be060c01b610962565b82600360008681526020019081526020016000208190555061065167a8c3ff9e904b7d9f60c01b610962565b81600460008681526020019081526020016000208190555061067d67fc0dfda661ac468e60c01b610962565b80600560008681526020019081526020016000208190555050505050565b60008060006106b46796d76dda64018d2a60c01b610962565b6106c8679763d51b932e56f460c01b610962565b6106dc676847e4858791e97a60c01b610962565b6004600085815260200190815260200160002054600360008681526020019081526020016000205460056000878152602001908152602001600020549250925092509193909250565b61073967b29d59cb86b750d860c01b610962565b61074d67267ffc29def3bbf460c01b610962565b60016002600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506107ca672bf4ea52d24c83c060c01b610962565b6107de67a1a2e6eddb30672a60c01b610962565b60018160ff1603610841576107fd677e4f4fc4d6efd96460c01b610962565b610811675617336f0922a54d60c01b610962565b60016003600084815260200190815260200160002060008282546108359190611459565b925050819055506108e2565b610855678441e96c0e8455b560c01b610962565b610869674bac45871fc9359560c01b610962565b60008160ff16036108cc57610888671b0949b97194439860c01b610962565b61089c6712daef92f1ce1c8260c01b610962565b60016004600084815260200190815260200160002060008282546108c09190611459565b925050819055506108e1565b6108e067e21fdfd071249d0360c01b610962565b5b5b5050565b6108fa679e3ffbaa3bb1eba960c01b610962565b61090e6783debfa71c49991560c01b610962565b8060016000848152602001908152602001600020819055505050565b60016020528060005260406000206000915090505481565b60006020528060005260406000206000915054906101000a900460ff1681565b50565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61098c81610979565b811461099757600080fd5b50565b6000813590506109a981610983565b92915050565b600881106109bc57600080fd5b50565b6000813590506109ce816109af565b92915050565b600080604083850312156109eb576109ea61096f565b5b60006109f98582860161099a565b9250506020610a0a858286016109bf565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a3f82610a14565b9050919050565b610a4f81610a34565b8114610a5a57600080fd5b50565b600081359050610a6c81610a46565b92915050565b60008115159050919050565b610a8781610a72565b8114610a9257600080fd5b50565b600081359050610aa481610a7e565b92915050565b600080600060608486031215610ac357610ac261096f565b5b6000610ad18682870161099a565b9350506020610ae286828701610a5d565b9250506040610af386828701610a95565b9150509250925092565b600060208284031215610b1357610b1261096f565b5b6000610b218482850161099a565b91505092915050565b610b3381610979565b82525050565b6000602082019050610b4e6000830184610b2a565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610ba282610b59565b810181811067ffffffffffffffff82111715610bc157610bc0610b6a565b5b80604052505050565b6000610bd4610965565b9050610be08282610b99565b919050565b600067ffffffffffffffff821115610c0057610bff610b6a565b5b602082029050602081019050919050565b600080fd5b6000610c29610c2484610be5565b610bca565b90508083825260208201905060208402830185811115610c4c57610c4b610c11565b5b835b81811015610c755780610c618882610a5d565b845260208401935050602081019050610c4e565b5050509392505050565b600082601f830112610c9457610c93610b54565b5b8135610ca4848260208601610c16565b91505092915050565b600067ffffffffffffffff821115610cc857610cc7610b6a565b5b602082029050602081019050919050565b6000610cec610ce784610cad565b610bca565b90508083825260208201905060208402830185811115610d0f57610d0e610c11565b5b835b81811015610d385780610d24888261099a565b845260208401935050602081019050610d11565b5050509392505050565b600082601f830112610d5757610d56610b54565b5b8135610d67848260208601610cd9565b91505092915050565b600067ffffffffffffffff821115610d8b57610d8a610b6a565b5b602082029050602081019050919050565b600080fd5b600067ffffffffffffffff821115610dbc57610dbb610b6a565b5b610dc582610b59565b9050602081019050919050565b82818337600083830152505050565b6000610df4610def84610da1565b610bca565b905082815260208101848484011115610e1057610e0f610d9c565b5b610e1b848285610dd2565b509392505050565b600082601f830112610e3857610e37610b54565b5b8135610e48848260208601610de1565b91505092915050565b6000610e64610e5f84610d70565b610bca565b90508083825260208201905060208402830185811115610e8757610e86610c11565b5b835b81811015610ece57803567ffffffffffffffff811115610eac57610eab610b54565b5b808601610eb98982610e23565b85526020850194505050602081019050610e89565b5050509392505050565b600082601f830112610eed57610eec610b54565b5b8135610efd848260208601610e51565b91505092915050565b600067ffffffffffffffff821115610f2157610f20610b6a565b5b602082029050602081019050919050565b600067ffffffffffffffff821115610f4d57610f4c610b6a565b5b610f5682610b59565b9050602081019050919050565b6000610f76610f7184610f32565b610bca565b905082815260208101848484011115610f9257610f91610d9c565b5b610f9d848285610dd2565b509392505050565b600082601f830112610fba57610fb9610b54565b5b8135610fca848260208601610f63565b91505092915050565b6000610fe6610fe184610f06565b610bca565b9050808382526020820190506020840283018581111561100957611008610c11565b5b835b8181101561105057803567ffffffffffffffff81111561102e5761102d610b54565b5b80860161103b8982610fa5565b8552602085019450505060208101905061100b565b5050509392505050565b600082601f83011261106f5761106e610b54565b5b813561107f848260208601610fd3565b91505092915050565b600080600080600060a086880312156110a4576110a361096f565b5b600086013567ffffffffffffffff8111156110c2576110c1610974565b5b6110ce88828901610c7f565b955050602086013567ffffffffffffffff8111156110ef576110ee610974565b5b6110fb88828901610d42565b945050604086013567ffffffffffffffff81111561111c5761111b610974565b5b61112888828901610ed8565b935050606086013567ffffffffffffffff81111561114957611148610974565b5b6111558882890161105a565b925050608086013567ffffffffffffffff81111561117657611175610974565b5b61118288828901610e23565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600881106111cf576111ce61118f565b5b50565b60008190506111e0826111be565b919050565b60006111f0826111d2565b9050919050565b611200816111e5565b82525050565b600060208201905061121b60008301846111f7565b92915050565b600080604083850312156112385761123761096f565b5b60006112468582860161099a565b925050602061125785828601610a5d565b9150509250929050565b61126a81610a72565b82525050565b60006020820190506112856000830184611261565b92915050565b600080600080608085870312156112a5576112a461096f565b5b60006112b38782880161099a565b94505060206112c48782880161099a565b93505060406112d58782880161099a565b92505060606112e68782880161099a565b91505092959194509250565b60006060820190506113076000830186610b2a565b6113146020830185610b2a565b6113216040830184610b2a565b949350505050565b600060ff82169050919050565b61133f81611329565b811461134a57600080fd5b50565b60008135905061135c81611336565b92915050565b600080604083850312156113795761137861096f565b5b60006113878582860161099a565b92505060206113988582860161134d565b9150509250929050565b600080604083850312156113b9576113b861096f565b5b60006113c78582860161099a565b92505060206113d88582860161099a565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061141c82610979565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361144e5761144d6113e2565b5b600182019050919050565b600061146482610979565b915061146f83610979565b9250828201905080821115611487576114866113e2565b5b9291505056fea2646970667358221220d392a3af79c6e6027ec90fd690ca58ef3781cdda7bbde95823bd3d6fe90c981764736f6c634300081e0033";

type MockGovernorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockGovernorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockGovernor__factory extends ContractFactory {
  constructor(...args: MockGovernorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockGovernor & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockGovernor__factory {
    return super.connect(runner) as MockGovernor__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockGovernorInterface {
    return new Interface(_abi) as MockGovernorInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockGovernor {
    return new Contract(address, _abi, runner) as unknown as MockGovernor;
  }
}
