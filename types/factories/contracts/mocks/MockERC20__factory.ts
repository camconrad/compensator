/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockERC20,
  MockERC20Interface,
} from "../../../contracts/mocks/MockERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "delegatee",
        type: "address",
      },
    ],
    name: "delegate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "delegates",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "getCurrentVotes",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "votingPower",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610e80380380610e8083398101604081905261002f9161010d565b8181600361003d83826101ff565b50600461004a82826101ff565b50505050506102bd565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261007b57600080fd5b81516001600160401b0381111561009457610094610054565b604051601f8201601f19908116603f011681016001600160401b03811182821017156100c2576100c2610054565b6040528181528382016020018510156100da57600080fd5b60005b828110156100f9576020818601810151838301820152016100dd565b506000918101602001919091529392505050565b6000806040838503121561012057600080fd5b82516001600160401b0381111561013657600080fd5b6101428582860161006a565b602085015190935090506001600160401b0381111561016057600080fd5b61016c8582860161006a565b9150509250929050565b600181811c9082168061018a57607f821691505b6020821081036101aa57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156101fa57806000526020600020601f840160051c810160208510156101d75750805b601f840160051c820191505b818110156101f757600081556001016101e3565b50505b505050565b81516001600160401b0381111561021857610218610054565b61022c816102268454610176565b846101b0565b6020601f82116001811461026057600083156102485750848201515b600019600385901b1c1916600184901b1784556101f7565b600084815260208120601f198516915b828110156102905787850151825560209485019460019092019101610270565b50848210156102ae5786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b610bb4806102cc6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80635c19a95c11610097578063a9059cbb11610066578063a9059cbb1461021c578063b4b5ea571461022f578063c07473f614610258578063dd62ed3e1461027857600080fd5b80635c19a95c146101c557806370a08231146101d857806395d89b41146102015780639dc29fac1461020957600080fd5b806323b872dd116100d357806323b872dd1461014d578063313ce5671461016057806340c10f191461016f578063587cde1e1461018457600080fd5b806306fdde03146100fa578063095ea7b31461011857806318160ddd1461013b575b600080fd5b6101026102b1565b60405161010f91906109e2565b60405180910390f35b61012b610126366004610a4c565b610343565b604051901515815260200161010f565b6002545b60405190815260200161010f565b61012b61015b366004610a76565b61035d565b6040516012815260200161010f565b61018261017d366004610a4c565b610381565b005b6101ad610192366004610ab3565b6005602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200161010f565b6101826101d3366004610ab3565b61041b565b61013f6101e6366004610ab3565b6001600160a01b031660009081526020819052604090205490565b610102610527565b610182610217366004610a4c565b610536565b61012b61022a366004610a4c565b610568565b61013f61023d366004610ab3565b6001600160a01b031660009081526006602052604090205490565b61013f610266366004610ab3565b60066020526000908152604090205481565b61013f610286366004610ad5565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546102c090610b08565b80601f01602080910402602001604051908101604052809291908181526020018280546102ec90610b08565b80156103395780601f1061030e57610100808354040283529160200191610339565b820191906000526020600020905b81548152906001019060200180831161031c57829003601f168201915b5050505050905090565b600033610351818585610576565b60019150505b92915050565b60003361036b858285610588565b61037685858561060c565b506001949350505050565b61038b828261066b565b6001600160a01b038216600090815260066020526040812080548392906103b3908490610b58565b90915550506001600160a01b038281166000908152600560205260409020541615610417576001600160a01b038083166000908152600560209081526040808320549093168252600690529081208054839290610411908490610b58565b90915550505b5050565b3360009081526005602090815260408083205491839052909120546001600160a01b039091169081156104b4576001600160a01b038216600090815260066020526040902054811161049a576001600160a01b0382166000908152600660205260408120805483929061048f908490610b6b565b909155506104b49050565b6001600160a01b0382166000908152600660205260408120555b33600090815260056020526040902080546001600160a01b0319166001600160a01b03851690811790915515610512576001600160a01b0383166000908152600660205260408120805483929061050c908490610b58565b90915550505b50503360009081526006602052604081205550565b6060600480546102c090610b08565b61054082826106a1565b6001600160a01b03821660009081526006602052604081208054839290610411908490610b6b565b60003361035181858561060c565b61058383838360016106d7565b505050565b6001600160a01b0383811660009081526001602090815260408083209386168352929052205460001981101561060657818110156105f757604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064015b60405180910390fd5b610606848484840360006106d7565b50505050565b6001600160a01b03831661063657604051634b637e8f60e11b8152600060048201526024016105ee565b6001600160a01b0382166106605760405163ec442f0560e01b8152600060048201526024016105ee565b6105838383836107ac565b6001600160a01b0382166106955760405163ec442f0560e01b8152600060048201526024016105ee565b610417600083836107ac565b6001600160a01b0382166106cb57604051634b637e8f60e11b8152600060048201526024016105ee565b610417826000836107ac565b6001600160a01b0384166107015760405163e602df0560e01b8152600060048201526024016105ee565b6001600160a01b03831661072b57604051634a1406b160e11b8152600060048201526024016105ee565b6001600160a01b038085166000908152600160209081526040808320938716835292905220829055801561060657826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161079e91815260200190565b60405180910390a350505050565b6107b78383836108b8565b6001600160a01b03831615610855576001600160a01b03808416600090815260056020526040902054168015610853576001600160a01b0381166000908152600660205260409020548211610839576001600160a01b0381166000908152600660205260408120805484929061082e908490610b6b565b909155506108539050565b6001600160a01b0381166000908152600660205260408120555b505b6001600160a01b03821615610583576001600160a01b03808316600090815260056020526040902054168015610606576001600160a01b038116600090815260066020526040812080548492906108ad908490610b58565b909155505050505050565b6001600160a01b0383166108e35780600260008282546108d89190610b58565b909155506109559050565b6001600160a01b038316600090815260208190526040902054818110156109365760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016105ee565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b03821661097157600280548290039055610990565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516109d591815260200190565b60405180910390a3505050565b602081526000825180602084015260005b81811015610a1057602081860181015160408684010152016109f3565b506000604082850101526040601f19601f83011684010191505092915050565b80356001600160a01b0381168114610a4757600080fd5b919050565b60008060408385031215610a5f57600080fd5b610a6883610a30565b946020939093013593505050565b600080600060608486031215610a8b57600080fd5b610a9484610a30565b9250610aa260208501610a30565b929592945050506040919091013590565b600060208284031215610ac557600080fd5b610ace82610a30565b9392505050565b60008060408385031215610ae857600080fd5b610af183610a30565b9150610aff60208401610a30565b90509250929050565b600181811c90821680610b1c57607f821691505b602082108103610b3c57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561035757610357610b42565b8181038181111561035757610357610b4256fea26469706673582212209856844928dc1c59b5eb97f3b6a196cc20854b6a012dc4f61a7d89c323207c7964736f6c634300081e0033";

type MockERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockERC20__factory extends ContractFactory {
  constructor(...args: MockERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    name: string,
    symbol: string,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(name, symbol, overrides || {});
  }
  override deploy(
    name: string,
    symbol: string,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(name, symbol, overrides || {}) as Promise<
      MockERC20 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockERC20__factory {
    return super.connect(runner) as MockERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockERC20Interface {
    return new Interface(_abi) as MockERC20Interface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockERC20 {
    return new Contract(address, _abi, runner) as unknown as MockERC20;
  }
}
