/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockERC20,
  MockERC20Interface,
} from "../../../contracts/mocks/MockERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "delegatee",
        type: "address",
      },
    ],
    name: "delegate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "delegates",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "getCurrentVotes",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "votingPower",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051611d1a380380611d1a833981810160405281019061003291906101ef565b818181600390816100439190610488565b5080600490816100539190610488565b50505061007067c51024b093a0276260c01b61007760201b60201c565b505061055a565b50565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6100e182610098565b810181811067ffffffffffffffff82111715610100576100ff6100a9565b5b80604052505050565b600061011361007a565b905061011f82826100d8565b919050565b600067ffffffffffffffff82111561013f5761013e6100a9565b5b61014882610098565b9050602081019050919050565b60005b83811015610173578082015181840152602081019050610158565b60008484015250505050565b600061019261018d84610124565b610109565b9050828152602081018484840111156101ae576101ad610093565b5b6101b9848285610155565b509392505050565b600082601f8301126101d6576101d561008e565b5b81516101e684826020860161017f565b91505092915050565b6000806040838503121561020657610205610084565b5b600083015167ffffffffffffffff81111561022457610223610089565b5b610230858286016101c1565b925050602083015167ffffffffffffffff81111561025157610250610089565b5b61025d858286016101c1565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806102b957607f821691505b6020821081036102cc576102cb610272565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026103347fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826102f7565b61033e86836102f7565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600061038561038061037b84610356565b610360565b610356565b9050919050565b6000819050919050565b61039f8361036a565b6103b36103ab8261038c565b848454610304565b825550505050565b600090565b6103c86103bb565b6103d3818484610396565b505050565b5b818110156103f7576103ec6000826103c0565b6001810190506103d9565b5050565b601f82111561043c5761040d816102d2565b610416846102e7565b81016020851015610425578190505b610439610431856102e7565b8301826103d8565b50505b505050565b600082821c905092915050565b600061045f60001984600802610441565b1980831691505092915050565b6000610478838361044e565b9150826002028217905092915050565b61049182610267565b67ffffffffffffffff8111156104aa576104a96100a9565b5b6104b482546102a1565b6104bf8282856103fb565b600060209050601f8311600181146104f257600084156104e0578287015190505b6104ea858261046c565b865550610552565b601f198416610500866102d2565b60005b8281101561052857848901518255600182019150602085019450602081019050610503565b868310156105455784890151610541601f89168261044e565b8355505b6001600288020188555050505b505050505050565b6117b1806105696000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80635c19a95c11610097578063a9059cbb11610066578063a9059cbb14610286578063b4b5ea57146102b6578063c07473f6146102e6578063dd62ed3e14610316576100f5565b80635c19a95c1461020057806370a082311461021c57806395d89b411461024c5780639dc29fac1461026a576100f5565b806323b872dd116100d357806323b872dd14610166578063313ce5671461019657806340c10f19146101b4578063587cde1e146101d0576100f5565b806306fdde03146100fa578063095ea7b31461011857806318160ddd14610148575b600080fd5b610102610346565b60405161010f91906113d1565b60405180910390f35b610132600480360381019061012d919061148c565b6103d8565b60405161013f91906114e7565b60405180910390f35b6101506103fb565b60405161015d9190611511565b60405180910390f35b610180600480360381019061017b919061152c565b610405565b60405161018d91906114e7565b60405180910390f35b61019e610434565b6040516101ab919061159b565b60405180910390f35b6101ce60048036038101906101c9919061148c565b61043d565b005b6101ea60048036038101906101e591906115b6565b6104f1565b6040516101f791906115f2565b60405180910390f35b61021a600480360381019061021591906115b6565b610524565b005b610236600480360381019061023191906115b6565b6109c6565b6040516102439190611511565b60405180910390f35b610254610a0e565b60405161026191906113d1565b60405180910390f35b610284600480360381019061027f919061148c565b610aa0565b005b6102a0600480360381019061029b919061148c565b610b54565b6040516102ad91906114e7565b60405180910390f35b6102d060048036038101906102cb91906115b6565b610b77565b6040516102dd9190611511565b60405180910390f35b61030060048036038101906102fb91906115b6565b610bfc565b60405161030d9190611511565b60405180910390f35b610330600480360381019061032b919061160d565b610c14565b60405161033d9190611511565b60405180910390f35b6060600380546103559061167c565b80601f01602080910402602001604051908101604052809291908181526020018280546103819061167c565b80156103ce5780601f106103a3576101008083540402835291602001916103ce565b820191906000526020600020905b8154815290600101906020018083116103b157829003601f168201915b5050505050905090565b6000806103e3610c9b565b90506103f0818585610ca3565b600191505092915050565b6000600254905090565b600080610410610c9b565b905061041d858285610cb5565b610428858585610d4a565b60019150509392505050565b60006012905090565b61045167ff103124c2082f5460c01b610e3e565b61046567d0c327c9a795f8cf60c01b610e3e565b61047967a18e91c02254b70760c01b610e3e565b6104838282610e41565b61049767b361bbc704b656f060c01b610e3e565b80600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104e691906116dc565b925050819055505050565b60056020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61053867f573e6cd8c2e595860c01b610e3e565b61054c675e232476c5f17db060c01b610e3e565b61056067f980533f4743eeb060c01b610e3e565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506105d86794f021a3fdd1226f60c01b610e3e565b6105ec67bff8f6a90924e12960c01b610e3e565b60006105f7336109c6565b905061060d672b5d664a39af3a2f60c01b610e3e565b610621675032b122246c34d760c01b610e3e565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146107cd5761066967224e443f701ac13960c01b610e3e565b61067d67297b985374d2527c60c01b610e3e565b61069167565be592edfafd2960c01b610e3e565b80600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541061075a576106eb674db746430cb6dc6760c01b610e3e565b6106ff67bf6cc46213b71e1a60c01b610e3e565b80600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461074e9190611710565b925050819055506107c8565b61076e6750c4a77311cde66660c01b610e3e565b61078267b13226e7bc7d106460c01b610e3e565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b6107e2565b6107e1678f0a7cd316ab97e960c01b610e3e565b5b6107f667b2c5f596c0b1331c60c01b610e3e565b82600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506108886769aab767c1e2ee1560c01b610e3e565b61089c67691de928b8c0a3b960c01b610e3e565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610953576108e46770f832bddb4eb54860c01b610e3e565b6108f867bd92c097e91a305160c01b610e3e565b80600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461094791906116dc565b92505081905550610968565b6109676748497caa31de5d7e60c01b610e3e565b5b61097c67d6d9353f9b25692260c01b610e3e565b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060048054610a1d9061167c565b80601f0160208091040260200160405190810160405280929190818152602001828054610a499061167c565b8015610a965780601f10610a6b57610100808354040283529160200191610a96565b820191906000526020600020905b815481529060010190602001808311610a7957829003601f168201915b5050505050905090565b610ab467c6d19c21708fbcdb60c01b610e3e565b610ac867269346067910801b60c01b610e3e565b610adc6752cbd287f3ae0fb660c01b610e3e565b610ae68282610ec3565b610afa67ed5ee3ff8b6025bf60c01b610e3e565b80600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b499190611710565b925050819055505050565b600080610b5f610c9b565b9050610b6c818585610d4a565b600191505092915050565b6000610b8d67e95eb539164a3a6c60c01b610e3e565b610ba16792f3d05b5644c81660c01b610e3e565b610bb56717ba271a5d7ac1d960c01b610e3e565b600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60066020528060005260406000206000915090505481565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b610cb08383836001610f45565b505050565b6000610cc18484610c14565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811015610d445781811015610d34578281836040517ffb8f41b2000000000000000000000000000000000000000000000000000000008152600401610d2b93929190611744565b60405180910390fd5b610d4384848484036000610f45565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610dbc5760006040517f96c6fd1e000000000000000000000000000000000000000000000000000000008152600401610db391906115f2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610e2e5760006040517fec442f05000000000000000000000000000000000000000000000000000000008152600401610e2591906115f2565b60405180910390fd5b610e3983838361111c565b505050565b50565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610eb35760006040517fec442f05000000000000000000000000000000000000000000000000000000008152600401610eaa91906115f2565b60405180910390fd5b610ebf6000838361111c565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610f355760006040517f96c6fd1e000000000000000000000000000000000000000000000000000000008152600401610f2c91906115f2565b60405180910390fd5b610f418260008361111c565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610fb75760006040517fe602df05000000000000000000000000000000000000000000000000000000008152600401610fae91906115f2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036110295760006040517f94280d6200000000000000000000000000000000000000000000000000000000815260040161102091906115f2565b60405180910390fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508015611116578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161110d9190611511565b60405180910390a35b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361116e57806002600082825461116291906116dc565b92505081905550611241565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156111fa578381836040517fe450d38c0000000000000000000000000000000000000000000000000000000081526004016111f193929190611744565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361128a57806002600082825403925050819055506112d7565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516113349190611511565b60405180910390a3505050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561137b578082015181840152602081019050611360565b60008484015250505050565b6000601f19601f8301169050919050565b60006113a382611341565b6113ad818561134c565b93506113bd81856020860161135d565b6113c681611387565b840191505092915050565b600060208201905081810360008301526113eb8184611398565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611423826113f8565b9050919050565b61143381611418565b811461143e57600080fd5b50565b6000813590506114508161142a565b92915050565b6000819050919050565b61146981611456565b811461147457600080fd5b50565b60008135905061148681611460565b92915050565b600080604083850312156114a3576114a26113f3565b5b60006114b185828601611441565b92505060206114c285828601611477565b9150509250929050565b60008115159050919050565b6114e1816114cc565b82525050565b60006020820190506114fc60008301846114d8565b92915050565b61150b81611456565b82525050565b60006020820190506115266000830184611502565b92915050565b600080600060608486031215611545576115446113f3565b5b600061155386828701611441565b935050602061156486828701611441565b925050604061157586828701611477565b9150509250925092565b600060ff82169050919050565b6115958161157f565b82525050565b60006020820190506115b0600083018461158c565b92915050565b6000602082840312156115cc576115cb6113f3565b5b60006115da84828501611441565b91505092915050565b6115ec81611418565b82525050565b600060208201905061160760008301846115e3565b92915050565b60008060408385031215611624576116236113f3565b5b600061163285828601611441565b925050602061164385828601611441565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061169457607f821691505b6020821081036116a7576116a661164d565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006116e782611456565b91506116f283611456565b925082820190508082111561170a576117096116ad565b5b92915050565b600061171b82611456565b915061172683611456565b925082820390508181111561173e5761173d6116ad565b5b92915050565b600060608201905061175960008301866115e3565b6117666020830185611502565b6117736040830184611502565b94935050505056fea2646970667358221220e251fa35bc2740e7b06e35a2abbc59cc32373f6db091256e2b01bb534b11724a64736f6c634300081e0033";

type MockERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockERC20__factory extends ContractFactory {
  constructor(...args: MockERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    name: string,
    symbol: string,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(name, symbol, overrides || {});
  }
  override deploy(
    name: string,
    symbol: string,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(name, symbol, overrides || {}) as Promise<
      MockERC20 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockERC20__factory {
    return super.connect(runner) as MockERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockERC20Interface {
    return new Interface(_abi) as MockERC20Interface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockERC20 {
    return new Contract(address, _abi, runner) as unknown as MockERC20;
  }
}
