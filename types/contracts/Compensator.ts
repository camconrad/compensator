/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface CompensatorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BASIS_POINTS"
      | "COMPOUND_GOVERNOR"
      | "COMP_TOKEN"
      | "DELEGATE_REWARD_PERCENT"
      | "DELEGATION_CAP_PERCENT"
      | "MAX_PROPOSAL_RESOLUTION_TIME"
      | "MIN_LOCK_PERIOD"
      | "REWARD_PRECISION"
      | "activeProposals"
      | "allVotes"
      | "allowance"
      | "approve"
      | "availableRewards"
      | "balanceOf"
      | "blocksPerDay"
      | "castVote(uint256,uint8,string)"
      | "castVote(uint256,uint8)"
      | "claimRewards"
      | "contractVoteDirection"
      | "contractVoted"
      | "decimals"
      | "delegateInfo"
      | "delegationCap"
      | "getContractVotingPower"
      | "getContractVotingPowerAt"
      | "getPendingRewards"
      | "getProposalStake"
      | "getTotalVotesCast"
      | "getVoteByIndex"
      | "getVoteInfo"
      | "lastRewarded"
      | "latestProposalId"
      | "name"
      | "owner"
      | "ownerDeposit"
      | "ownerWithdraw"
      | "pendingProposals"
      | "proposalCreationTime"
      | "proposalOutcomes"
      | "proposalStakes"
      | "reclaimStake"
      | "renounceOwnership"
      | "resolveProposal"
      | "rewardIndex"
      | "rewardRate"
      | "rewardsUntil"
      | "setBlocksPerDay"
      | "setRewardRate"
      | "stakeForProposal"
      | "startRewardIndex"
      | "symbol"
      | "totalDelegatedCOMP"
      | "totalPendingRewards"
      | "totalStakesAgainst"
      | "totalStakesFor"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "unclaimedRewards"
      | "unlockTime"
      | "userDeposit"
      | "userWithdraw"
      | "voteCount"
      | "voteInfo"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "COMPLocked"
      | "ClaimRewards"
      | "DelegatePerformanceUpdated"
      | "DelegationCapUpdated"
      | "NewProposalDetected"
      | "OwnerDeposit"
      | "OwnerWithdraw"
      | "OwnershipTransferred"
      | "ProposalActivated"
      | "ProposalAutoResolved"
      | "ProposalDeactivated"
      | "ProposalStakeDistributed"
      | "ProposalStaked"
      | "ProposalStateChanged"
      | "RewardIndexUpdated"
      | "RewardRateUpdate"
      | "RewardsDistributed"
      | "StakeReclaimed"
      | "Transfer"
      | "UserDeposit"
      | "UserRewardsUpdated"
      | "UserWithdraw"
      | "VoteCast"
      | "VoteCastWithReason"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BASIS_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COMPOUND_GOVERNOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COMP_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DELEGATE_REWARD_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DELEGATION_CAP_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PROPOSAL_RESOLUTION_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_LOCK_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REWARD_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activeProposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allVotes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "availableRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "blocksPerDay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "castVote(uint256,uint8,string)",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "castVote(uint256,uint8)",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractVoteDirection",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contractVoted",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "delegateInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delegationCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractVotingPower",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractVotingPowerAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalStake",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalVotesCast",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVoteByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoteInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastRewarded",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestProposalId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingProposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalCreationTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalOutcomes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalStakes",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "reclaimStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolveProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsUntil",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBlocksPerDay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeForProposal",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startRewardIndex",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalDelegatedCOMP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalPendingRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakesAgainst",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakesFor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unclaimedRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockTime",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "voteCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "voteInfo",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASIS_POINTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COMPOUND_GOVERNOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "COMP_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DELEGATE_REWARD_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DELEGATION_CAP_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PROPOSAL_RESOLUTION_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_LOCK_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REWARD_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allVotes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "availableRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blocksPerDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castVote(uint256,uint8,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castVote(uint256,uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractVoteDirection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractVoted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegateInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegationCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractVotingPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractVotingPowerAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalVotesCast",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoteByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoteInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRewarded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestProposalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalCreationTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalOutcomes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalStakes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reclaimStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardsUntil",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBlocksPerDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeForProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startRewardIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalDelegatedCOMP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStakesAgainst",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStakesFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unclaimedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlockTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voteCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voteInfo", data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace COMPLockedEvent {
  export type InputTuple = [delegator: AddressLike, unlockTime: BigNumberish];
  export type OutputTuple = [delegator: string, unlockTime: bigint];
  export interface OutputObject {
    delegator: string;
    unlockTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimRewardsEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DelegatePerformanceUpdatedEvent {
  export type InputTuple = [
    successfulVotes: BigNumberish,
    totalVotes: BigNumberish,
    totalRewardsEarned: BigNumberish
  ];
  export type OutputTuple = [
    successfulVotes: bigint,
    totalVotes: bigint,
    totalRewardsEarned: bigint
  ];
  export interface OutputObject {
    successfulVotes: bigint;
    totalVotes: bigint;
    totalRewardsEarned: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DelegationCapUpdatedEvent {
  export type InputTuple = [
    oldCap: BigNumberish,
    newCap: BigNumberish,
    totalSupply: BigNumberish
  ];
  export type OutputTuple = [
    oldCap: bigint,
    newCap: bigint,
    totalSupply: bigint
  ];
  export interface OutputObject {
    oldCap: bigint;
    newCap: bigint;
    totalSupply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewProposalDetectedEvent {
  export type InputTuple = [proposalId: BigNumberish];
  export type OutputTuple = [proposalId: bigint];
  export interface OutputObject {
    proposalId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerDepositEvent {
  export type InputTuple = [owner: AddressLike, amount: BigNumberish];
  export type OutputTuple = [owner: string, amount: bigint];
  export interface OutputObject {
    owner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerWithdrawEvent {
  export type InputTuple = [owner: AddressLike, amount: BigNumberish];
  export type OutputTuple = [owner: string, amount: bigint];
  export interface OutputObject {
    owner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalActivatedEvent {
  export type InputTuple = [proposalId: BigNumberish];
  export type OutputTuple = [proposalId: bigint];
  export interface OutputObject {
    proposalId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalAutoResolvedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    winningSupport: BigNumberish
  ];
  export type OutputTuple = [proposalId: bigint, winningSupport: bigint];
  export interface OutputObject {
    proposalId: bigint;
    winningSupport: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalDeactivatedEvent {
  export type InputTuple = [proposalId: BigNumberish];
  export type OutputTuple = [proposalId: bigint];
  export interface OutputObject {
    proposalId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalStakeDistributedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    winningSupport: BigNumberish
  ];
  export type OutputTuple = [proposalId: bigint, winningSupport: bigint];
  export interface OutputObject {
    proposalId: bigint;
    winningSupport: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalStakedEvent {
  export type InputTuple = [
    user: AddressLike,
    proposalId: BigNumberish,
    support: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    proposalId: bigint,
    support: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    user: string;
    proposalId: bigint;
    support: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalStateChangedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    oldState: BigNumberish,
    newState: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: bigint,
    oldState: bigint,
    newState: bigint
  ];
  export interface OutputObject {
    proposalId: bigint;
    oldState: bigint;
    newState: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardIndexUpdatedEvent {
  export type InputTuple = [
    newRewardIndex: BigNumberish,
    rewardsAccrued: BigNumberish
  ];
  export type OutputTuple = [newRewardIndex: bigint, rewardsAccrued: bigint];
  export interface OutputObject {
    newRewardIndex: bigint;
    rewardsAccrued: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardRateUpdateEvent {
  export type InputTuple = [owner: AddressLike, newRate: BigNumberish];
  export type OutputTuple = [owner: string, newRate: bigint];
  export interface OutputObject {
    owner: string;
    newRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsDistributedEvent {
  export type InputTuple = [
    totalRewards: BigNumberish,
    rewardIndex: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    totalRewards: bigint,
    rewardIndex: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    totalRewards: bigint;
    rewardIndex: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakeReclaimedEvent {
  export type InputTuple = [
    user: AddressLike,
    proposalId: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [user: string, proposalId: bigint, amount: bigint];
  export interface OutputObject {
    user: string;
    proposalId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserDepositEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserRewardsUpdatedEvent {
  export type InputTuple = [
    user: AddressLike,
    newRewards: BigNumberish,
    totalUnclaimed: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    newRewards: bigint,
    totalUnclaimed: bigint
  ];
  export interface OutputObject {
    user: string;
    newRewards: bigint;
    totalUnclaimed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserWithdrawEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    support: BigNumberish,
    blockNumber: BigNumberish,
    txHash: BytesLike
  ];
  export type OutputTuple = [
    proposalId: bigint,
    support: bigint,
    blockNumber: bigint,
    txHash: string
  ];
  export interface OutputObject {
    proposalId: bigint;
    support: bigint;
    blockNumber: bigint;
    txHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastWithReasonEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    support: BigNumberish,
    blockNumber: BigNumberish,
    txHash: BytesLike,
    votingPower: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [
    proposalId: bigint,
    support: bigint,
    blockNumber: bigint,
    txHash: string,
    votingPower: bigint,
    reason: string
  ];
  export interface OutputObject {
    proposalId: bigint;
    support: bigint;
    blockNumber: bigint;
    txHash: string;
    votingPower: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Compensator extends BaseContract {
  connect(runner?: ContractRunner | null): Compensator;
  waitForDeployment(): Promise<this>;

  interface: CompensatorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BASIS_POINTS: TypedContractMethod<[], [bigint], "view">;

  COMPOUND_GOVERNOR: TypedContractMethod<[], [string], "view">;

  COMP_TOKEN: TypedContractMethod<[], [string], "view">;

  DELEGATE_REWARD_PERCENT: TypedContractMethod<[], [bigint], "view">;

  DELEGATION_CAP_PERCENT: TypedContractMethod<[], [bigint], "view">;

  MAX_PROPOSAL_RESOLUTION_TIME: TypedContractMethod<[], [bigint], "view">;

  MIN_LOCK_PERIOD: TypedContractMethod<[], [bigint], "view">;

  REWARD_PRECISION: TypedContractMethod<[], [bigint], "view">;

  activeProposals: TypedContractMethod<
    [proposalId: BigNumberish],
    [boolean],
    "view"
  >;

  allVotes: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, bigint, bigint, string] & {
        direction: bigint;
        blockNumber: bigint;
        txHash: string;
        timestamp: bigint;
        votingPower: bigint;
        reason: string;
      }
    ],
    "view"
  >;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  availableRewards: TypedContractMethod<[], [bigint], "view">;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  blocksPerDay: TypedContractMethod<[], [bigint], "view">;

  "castVote(uint256,uint8,string)": TypedContractMethod<
    [proposalId: BigNumberish, support: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;

  "castVote(uint256,uint8)": TypedContractMethod<
    [proposalId: BigNumberish, support: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimRewards: TypedContractMethod<[], [void], "nonpayable">;

  contractVoteDirection: TypedContractMethod<
    [proposalId: BigNumberish],
    [bigint],
    "view"
  >;

  contractVoted: TypedContractMethod<
    [proposalId: BigNumberish],
    [boolean],
    "view"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  delegateInfo: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        successfulVotes: bigint;
        totalVotes: bigint;
        totalRewardsEarned: bigint;
        totalVotingPowerUsed: bigint;
        averageVotingPowerPerVote: bigint;
      }
    ],
    "view"
  >;

  delegationCap: TypedContractMethod<[], [bigint], "view">;

  getContractVotingPower: TypedContractMethod<[], [bigint], "view">;

  getContractVotingPowerAt: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  getPendingRewards: TypedContractMethod<
    [delegator: AddressLike],
    [bigint],
    "view"
  >;

  getProposalStake: TypedContractMethod<
    [proposalId: BigNumberish, delegator: AddressLike],
    [[bigint, bigint] & { forStake: bigint; againstStake: bigint }],
    "view"
  >;

  getTotalVotesCast: TypedContractMethod<[], [bigint], "view">;

  getVoteByIndex: TypedContractMethod<
    [voteIndex: BigNumberish],
    [
      [bigint, bigint, string, bigint, bigint, string] & {
        direction: bigint;
        blockNumber: bigint;
        txHash: string;
        timestamp: bigint;
        votingPower: bigint;
        reason: string;
      }
    ],
    "view"
  >;

  getVoteInfo: TypedContractMethod<
    [proposalId: BigNumberish],
    [
      [bigint, bigint, string, bigint, bigint, string] & {
        direction: bigint;
        blockNumber: bigint;
        txHash: string;
        timestamp: bigint;
        votingPower: bigint;
        reason: string;
      }
    ],
    "view"
  >;

  lastRewarded: TypedContractMethod<[], [bigint], "view">;

  latestProposalId: TypedContractMethod<[], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerDeposit: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  ownerWithdraw: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  pendingProposals: TypedContractMethod<
    [proposalId: BigNumberish],
    [boolean],
    "view"
  >;

  proposalCreationTime: TypedContractMethod<
    [proposalId: BigNumberish],
    [bigint],
    "view"
  >;

  proposalOutcomes: TypedContractMethod<
    [proposalId: BigNumberish],
    [bigint],
    "view"
  >;

  proposalStakes: TypedContractMethod<
    [proposalId: BigNumberish, delegator: AddressLike],
    [[bigint, bigint] & { forStake: bigint; againstStake: bigint }],
    "view"
  >;

  reclaimStake: TypedContractMethod<
    [proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  resolveProposal: TypedContractMethod<
    [proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  rewardIndex: TypedContractMethod<[], [bigint], "view">;

  rewardRate: TypedContractMethod<[], [bigint], "view">;

  rewardsUntil: TypedContractMethod<[], [bigint], "view">;

  setBlocksPerDay: TypedContractMethod<
    [_blocksPerDay: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRewardRate: TypedContractMethod<
    [newRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  stakeForProposal: TypedContractMethod<
    [proposalId: BigNumberish, support: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  startRewardIndex: TypedContractMethod<
    [delegator: AddressLike],
    [bigint],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  totalDelegatedCOMP: TypedContractMethod<[], [bigint], "view">;

  totalPendingRewards: TypedContractMethod<[], [bigint], "view">;

  totalStakesAgainst: TypedContractMethod<
    [proposalId: BigNumberish],
    [bigint],
    "view"
  >;

  totalStakesFor: TypedContractMethod<
    [proposalId: BigNumberish],
    [bigint],
    "view"
  >;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unclaimedRewards: TypedContractMethod<
    [delegator: AddressLike],
    [bigint],
    "view"
  >;

  unlockTime: TypedContractMethod<[delegator: AddressLike], [bigint], "view">;

  userDeposit: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  userWithdraw: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  voteCount: TypedContractMethod<[], [bigint], "view">;

  voteInfo: TypedContractMethod<
    [proposalId: BigNumberish],
    [
      [bigint, bigint, string, bigint, bigint, string] & {
        direction: bigint;
        blockNumber: bigint;
        txHash: string;
        timestamp: bigint;
        votingPower: bigint;
        reason: string;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BASIS_POINTS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "COMPOUND_GOVERNOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "COMP_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DELEGATE_REWARD_PERCENT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DELEGATION_CAP_PERCENT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_PROPOSAL_RESOLUTION_TIME"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_LOCK_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REWARD_PRECISION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "activeProposals"
  ): TypedContractMethod<[proposalId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "allVotes"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, bigint, bigint, string] & {
        direction: bigint;
        blockNumber: bigint;
        txHash: string;
        timestamp: bigint;
        votingPower: bigint;
        reason: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "availableRewards"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "blocksPerDay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "castVote(uint256,uint8,string)"
  ): TypedContractMethod<
    [proposalId: BigNumberish, support: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castVote(uint256,uint8)"
  ): TypedContractMethod<
    [proposalId: BigNumberish, support: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimRewards"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "contractVoteDirection"
  ): TypedContractMethod<[proposalId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "contractVoted"
  ): TypedContractMethod<[proposalId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "delegateInfo"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        successfulVotes: bigint;
        totalVotes: bigint;
        totalRewardsEarned: bigint;
        totalVotingPowerUsed: bigint;
        averageVotingPowerPerVote: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "delegationCap"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getContractVotingPower"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getContractVotingPowerAt"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPendingRewards"
  ): TypedContractMethod<[delegator: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getProposalStake"
  ): TypedContractMethod<
    [proposalId: BigNumberish, delegator: AddressLike],
    [[bigint, bigint] & { forStake: bigint; againstStake: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalVotesCast"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVoteByIndex"
  ): TypedContractMethod<
    [voteIndex: BigNumberish],
    [
      [bigint, bigint, string, bigint, bigint, string] & {
        direction: bigint;
        blockNumber: bigint;
        txHash: string;
        timestamp: bigint;
        votingPower: bigint;
        reason: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVoteInfo"
  ): TypedContractMethod<
    [proposalId: BigNumberish],
    [
      [bigint, bigint, string, bigint, bigint, string] & {
        direction: bigint;
        blockNumber: bigint;
        txHash: string;
        timestamp: bigint;
        votingPower: bigint;
        reason: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "lastRewarded"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "latestProposalId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerDeposit"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ownerWithdraw"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "pendingProposals"
  ): TypedContractMethod<[proposalId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "proposalCreationTime"
  ): TypedContractMethod<[proposalId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposalOutcomes"
  ): TypedContractMethod<[proposalId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposalStakes"
  ): TypedContractMethod<
    [proposalId: BigNumberish, delegator: AddressLike],
    [[bigint, bigint] & { forStake: bigint; againstStake: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "reclaimStake"
  ): TypedContractMethod<[proposalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resolveProposal"
  ): TypedContractMethod<[proposalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rewardIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewardRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewardsUntil"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setBlocksPerDay"
  ): TypedContractMethod<[_blocksPerDay: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRewardRate"
  ): TypedContractMethod<[newRate: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stakeForProposal"
  ): TypedContractMethod<
    [proposalId: BigNumberish, support: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "startRewardIndex"
  ): TypedContractMethod<[delegator: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalDelegatedCOMP"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalPendingRewards"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalStakesAgainst"
  ): TypedContractMethod<[proposalId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalStakesFor"
  ): TypedContractMethod<[proposalId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unclaimedRewards"
  ): TypedContractMethod<[delegator: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "unlockTime"
  ): TypedContractMethod<[delegator: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "userDeposit"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userWithdraw"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "voteCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "voteInfo"
  ): TypedContractMethod<
    [proposalId: BigNumberish],
    [
      [bigint, bigint, string, bigint, bigint, string] & {
        direction: bigint;
        blockNumber: bigint;
        txHash: string;
        timestamp: bigint;
        votingPower: bigint;
        reason: string;
      }
    ],
    "view"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "COMPLocked"
  ): TypedContractEvent<
    COMPLockedEvent.InputTuple,
    COMPLockedEvent.OutputTuple,
    COMPLockedEvent.OutputObject
  >;
  getEvent(
    key: "ClaimRewards"
  ): TypedContractEvent<
    ClaimRewardsEvent.InputTuple,
    ClaimRewardsEvent.OutputTuple,
    ClaimRewardsEvent.OutputObject
  >;
  getEvent(
    key: "DelegatePerformanceUpdated"
  ): TypedContractEvent<
    DelegatePerformanceUpdatedEvent.InputTuple,
    DelegatePerformanceUpdatedEvent.OutputTuple,
    DelegatePerformanceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "DelegationCapUpdated"
  ): TypedContractEvent<
    DelegationCapUpdatedEvent.InputTuple,
    DelegationCapUpdatedEvent.OutputTuple,
    DelegationCapUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "NewProposalDetected"
  ): TypedContractEvent<
    NewProposalDetectedEvent.InputTuple,
    NewProposalDetectedEvent.OutputTuple,
    NewProposalDetectedEvent.OutputObject
  >;
  getEvent(
    key: "OwnerDeposit"
  ): TypedContractEvent<
    OwnerDepositEvent.InputTuple,
    OwnerDepositEvent.OutputTuple,
    OwnerDepositEvent.OutputObject
  >;
  getEvent(
    key: "OwnerWithdraw"
  ): TypedContractEvent<
    OwnerWithdrawEvent.InputTuple,
    OwnerWithdrawEvent.OutputTuple,
    OwnerWithdrawEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProposalActivated"
  ): TypedContractEvent<
    ProposalActivatedEvent.InputTuple,
    ProposalActivatedEvent.OutputTuple,
    ProposalActivatedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalAutoResolved"
  ): TypedContractEvent<
    ProposalAutoResolvedEvent.InputTuple,
    ProposalAutoResolvedEvent.OutputTuple,
    ProposalAutoResolvedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalDeactivated"
  ): TypedContractEvent<
    ProposalDeactivatedEvent.InputTuple,
    ProposalDeactivatedEvent.OutputTuple,
    ProposalDeactivatedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalStakeDistributed"
  ): TypedContractEvent<
    ProposalStakeDistributedEvent.InputTuple,
    ProposalStakeDistributedEvent.OutputTuple,
    ProposalStakeDistributedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalStaked"
  ): TypedContractEvent<
    ProposalStakedEvent.InputTuple,
    ProposalStakedEvent.OutputTuple,
    ProposalStakedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalStateChanged"
  ): TypedContractEvent<
    ProposalStateChangedEvent.InputTuple,
    ProposalStateChangedEvent.OutputTuple,
    ProposalStateChangedEvent.OutputObject
  >;
  getEvent(
    key: "RewardIndexUpdated"
  ): TypedContractEvent<
    RewardIndexUpdatedEvent.InputTuple,
    RewardIndexUpdatedEvent.OutputTuple,
    RewardIndexUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RewardRateUpdate"
  ): TypedContractEvent<
    RewardRateUpdateEvent.InputTuple,
    RewardRateUpdateEvent.OutputTuple,
    RewardRateUpdateEvent.OutputObject
  >;
  getEvent(
    key: "RewardsDistributed"
  ): TypedContractEvent<
    RewardsDistributedEvent.InputTuple,
    RewardsDistributedEvent.OutputTuple,
    RewardsDistributedEvent.OutputObject
  >;
  getEvent(
    key: "StakeReclaimed"
  ): TypedContractEvent<
    StakeReclaimedEvent.InputTuple,
    StakeReclaimedEvent.OutputTuple,
    StakeReclaimedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "UserDeposit"
  ): TypedContractEvent<
    UserDepositEvent.InputTuple,
    UserDepositEvent.OutputTuple,
    UserDepositEvent.OutputObject
  >;
  getEvent(
    key: "UserRewardsUpdated"
  ): TypedContractEvent<
    UserRewardsUpdatedEvent.InputTuple,
    UserRewardsUpdatedEvent.OutputTuple,
    UserRewardsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "UserWithdraw"
  ): TypedContractEvent<
    UserWithdrawEvent.InputTuple,
    UserWithdrawEvent.OutputTuple,
    UserWithdrawEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;
  getEvent(
    key: "VoteCastWithReason"
  ): TypedContractEvent<
    VoteCastWithReasonEvent.InputTuple,
    VoteCastWithReasonEvent.OutputTuple,
    VoteCastWithReasonEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "COMPLocked(address,uint256)": TypedContractEvent<
      COMPLockedEvent.InputTuple,
      COMPLockedEvent.OutputTuple,
      COMPLockedEvent.OutputObject
    >;
    COMPLocked: TypedContractEvent<
      COMPLockedEvent.InputTuple,
      COMPLockedEvent.OutputTuple,
      COMPLockedEvent.OutputObject
    >;

    "ClaimRewards(address,uint256)": TypedContractEvent<
      ClaimRewardsEvent.InputTuple,
      ClaimRewardsEvent.OutputTuple,
      ClaimRewardsEvent.OutputObject
    >;
    ClaimRewards: TypedContractEvent<
      ClaimRewardsEvent.InputTuple,
      ClaimRewardsEvent.OutputTuple,
      ClaimRewardsEvent.OutputObject
    >;

    "DelegatePerformanceUpdated(uint256,uint256,uint256)": TypedContractEvent<
      DelegatePerformanceUpdatedEvent.InputTuple,
      DelegatePerformanceUpdatedEvent.OutputTuple,
      DelegatePerformanceUpdatedEvent.OutputObject
    >;
    DelegatePerformanceUpdated: TypedContractEvent<
      DelegatePerformanceUpdatedEvent.InputTuple,
      DelegatePerformanceUpdatedEvent.OutputTuple,
      DelegatePerformanceUpdatedEvent.OutputObject
    >;

    "DelegationCapUpdated(uint256,uint256,uint256)": TypedContractEvent<
      DelegationCapUpdatedEvent.InputTuple,
      DelegationCapUpdatedEvent.OutputTuple,
      DelegationCapUpdatedEvent.OutputObject
    >;
    DelegationCapUpdated: TypedContractEvent<
      DelegationCapUpdatedEvent.InputTuple,
      DelegationCapUpdatedEvent.OutputTuple,
      DelegationCapUpdatedEvent.OutputObject
    >;

    "NewProposalDetected(uint256)": TypedContractEvent<
      NewProposalDetectedEvent.InputTuple,
      NewProposalDetectedEvent.OutputTuple,
      NewProposalDetectedEvent.OutputObject
    >;
    NewProposalDetected: TypedContractEvent<
      NewProposalDetectedEvent.InputTuple,
      NewProposalDetectedEvent.OutputTuple,
      NewProposalDetectedEvent.OutputObject
    >;

    "OwnerDeposit(address,uint256)": TypedContractEvent<
      OwnerDepositEvent.InputTuple,
      OwnerDepositEvent.OutputTuple,
      OwnerDepositEvent.OutputObject
    >;
    OwnerDeposit: TypedContractEvent<
      OwnerDepositEvent.InputTuple,
      OwnerDepositEvent.OutputTuple,
      OwnerDepositEvent.OutputObject
    >;

    "OwnerWithdraw(address,uint256)": TypedContractEvent<
      OwnerWithdrawEvent.InputTuple,
      OwnerWithdrawEvent.OutputTuple,
      OwnerWithdrawEvent.OutputObject
    >;
    OwnerWithdraw: TypedContractEvent<
      OwnerWithdrawEvent.InputTuple,
      OwnerWithdrawEvent.OutputTuple,
      OwnerWithdrawEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProposalActivated(uint256)": TypedContractEvent<
      ProposalActivatedEvent.InputTuple,
      ProposalActivatedEvent.OutputTuple,
      ProposalActivatedEvent.OutputObject
    >;
    ProposalActivated: TypedContractEvent<
      ProposalActivatedEvent.InputTuple,
      ProposalActivatedEvent.OutputTuple,
      ProposalActivatedEvent.OutputObject
    >;

    "ProposalAutoResolved(uint256,uint8)": TypedContractEvent<
      ProposalAutoResolvedEvent.InputTuple,
      ProposalAutoResolvedEvent.OutputTuple,
      ProposalAutoResolvedEvent.OutputObject
    >;
    ProposalAutoResolved: TypedContractEvent<
      ProposalAutoResolvedEvent.InputTuple,
      ProposalAutoResolvedEvent.OutputTuple,
      ProposalAutoResolvedEvent.OutputObject
    >;

    "ProposalDeactivated(uint256)": TypedContractEvent<
      ProposalDeactivatedEvent.InputTuple,
      ProposalDeactivatedEvent.OutputTuple,
      ProposalDeactivatedEvent.OutputObject
    >;
    ProposalDeactivated: TypedContractEvent<
      ProposalDeactivatedEvent.InputTuple,
      ProposalDeactivatedEvent.OutputTuple,
      ProposalDeactivatedEvent.OutputObject
    >;

    "ProposalStakeDistributed(uint256,uint8)": TypedContractEvent<
      ProposalStakeDistributedEvent.InputTuple,
      ProposalStakeDistributedEvent.OutputTuple,
      ProposalStakeDistributedEvent.OutputObject
    >;
    ProposalStakeDistributed: TypedContractEvent<
      ProposalStakeDistributedEvent.InputTuple,
      ProposalStakeDistributedEvent.OutputTuple,
      ProposalStakeDistributedEvent.OutputObject
    >;

    "ProposalStaked(address,uint256,uint8,uint256)": TypedContractEvent<
      ProposalStakedEvent.InputTuple,
      ProposalStakedEvent.OutputTuple,
      ProposalStakedEvent.OutputObject
    >;
    ProposalStaked: TypedContractEvent<
      ProposalStakedEvent.InputTuple,
      ProposalStakedEvent.OutputTuple,
      ProposalStakedEvent.OutputObject
    >;

    "ProposalStateChanged(uint256,uint8,uint8)": TypedContractEvent<
      ProposalStateChangedEvent.InputTuple,
      ProposalStateChangedEvent.OutputTuple,
      ProposalStateChangedEvent.OutputObject
    >;
    ProposalStateChanged: TypedContractEvent<
      ProposalStateChangedEvent.InputTuple,
      ProposalStateChangedEvent.OutputTuple,
      ProposalStateChangedEvent.OutputObject
    >;

    "RewardIndexUpdated(uint256,uint256)": TypedContractEvent<
      RewardIndexUpdatedEvent.InputTuple,
      RewardIndexUpdatedEvent.OutputTuple,
      RewardIndexUpdatedEvent.OutputObject
    >;
    RewardIndexUpdated: TypedContractEvent<
      RewardIndexUpdatedEvent.InputTuple,
      RewardIndexUpdatedEvent.OutputTuple,
      RewardIndexUpdatedEvent.OutputObject
    >;

    "RewardRateUpdate(address,uint256)": TypedContractEvent<
      RewardRateUpdateEvent.InputTuple,
      RewardRateUpdateEvent.OutputTuple,
      RewardRateUpdateEvent.OutputObject
    >;
    RewardRateUpdate: TypedContractEvent<
      RewardRateUpdateEvent.InputTuple,
      RewardRateUpdateEvent.OutputTuple,
      RewardRateUpdateEvent.OutputObject
    >;

    "RewardsDistributed(uint256,uint256,uint256)": TypedContractEvent<
      RewardsDistributedEvent.InputTuple,
      RewardsDistributedEvent.OutputTuple,
      RewardsDistributedEvent.OutputObject
    >;
    RewardsDistributed: TypedContractEvent<
      RewardsDistributedEvent.InputTuple,
      RewardsDistributedEvent.OutputTuple,
      RewardsDistributedEvent.OutputObject
    >;

    "StakeReclaimed(address,uint256,uint256)": TypedContractEvent<
      StakeReclaimedEvent.InputTuple,
      StakeReclaimedEvent.OutputTuple,
      StakeReclaimedEvent.OutputObject
    >;
    StakeReclaimed: TypedContractEvent<
      StakeReclaimedEvent.InputTuple,
      StakeReclaimedEvent.OutputTuple,
      StakeReclaimedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "UserDeposit(address,uint256)": TypedContractEvent<
      UserDepositEvent.InputTuple,
      UserDepositEvent.OutputTuple,
      UserDepositEvent.OutputObject
    >;
    UserDeposit: TypedContractEvent<
      UserDepositEvent.InputTuple,
      UserDepositEvent.OutputTuple,
      UserDepositEvent.OutputObject
    >;

    "UserRewardsUpdated(address,uint256,uint256)": TypedContractEvent<
      UserRewardsUpdatedEvent.InputTuple,
      UserRewardsUpdatedEvent.OutputTuple,
      UserRewardsUpdatedEvent.OutputObject
    >;
    UserRewardsUpdated: TypedContractEvent<
      UserRewardsUpdatedEvent.InputTuple,
      UserRewardsUpdatedEvent.OutputTuple,
      UserRewardsUpdatedEvent.OutputObject
    >;

    "UserWithdraw(address,uint256)": TypedContractEvent<
      UserWithdrawEvent.InputTuple,
      UserWithdrawEvent.OutputTuple,
      UserWithdrawEvent.OutputObject
    >;
    UserWithdraw: TypedContractEvent<
      UserWithdrawEvent.InputTuple,
      UserWithdrawEvent.OutputTuple,
      UserWithdrawEvent.OutputObject
    >;

    "VoteCast(uint256,uint8,uint256,bytes32)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;

    "VoteCastWithReason(uint256,uint8,uint256,bytes32,uint256,string)": TypedContractEvent<
      VoteCastWithReasonEvent.InputTuple,
      VoteCastWithReasonEvent.OutputTuple,
      VoteCastWithReasonEvent.OutputObject
    >;
    VoteCastWithReason: TypedContractEvent<
      VoteCastWithReasonEvent.InputTuple,
      VoteCastWithReasonEvent.OutputTuple,
      VoteCastWithReasonEvent.OutputObject
    >;
  };
}
