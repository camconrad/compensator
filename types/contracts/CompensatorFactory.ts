/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface CompensatorFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "COMPOUND_GOVERNOR"
      | "COMP_TOKEN"
      | "compensators"
      | "createCompensator"
      | "createCompensatorForSelf"
      | "getCompensator"
      | "getCompensators"
      | "getCompensatorsCount"
      | "hasCompensator"
      | "ownerToCompensator"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "CompensatorCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "COMPOUND_GOVERNOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COMP_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "compensators",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createCompensator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createCompensatorForSelf",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCompensator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCompensators",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCompensatorsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasCompensator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerToCompensator",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "COMPOUND_GOVERNOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "COMP_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "compensators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCompensator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCompensatorForSelf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCompensator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCompensators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCompensatorsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasCompensator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerToCompensator",
    data: BytesLike
  ): Result;
}

export namespace CompensatorCreatedEvent {
  export type InputTuple = [owner: AddressLike, compensator: AddressLike];
  export type OutputTuple = [owner: string, compensator: string];
  export interface OutputObject {
    owner: string;
    compensator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CompensatorFactory extends BaseContract {
  connect(runner?: ContractRunner | null): CompensatorFactory;
  waitForDeployment(): Promise<this>;

  interface: CompensatorFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  COMPOUND_GOVERNOR: TypedContractMethod<[], [string], "view">;

  COMP_TOKEN: TypedContractMethod<[], [string], "view">;

  compensators: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  createCompensator: TypedContractMethod<
    [owner: AddressLike],
    [string],
    "nonpayable"
  >;

  createCompensatorForSelf: TypedContractMethod<[], [string], "nonpayable">;

  getCompensator: TypedContractMethod<[owner: AddressLike], [string], "view">;

  getCompensators: TypedContractMethod<
    [offset: BigNumberish, limit: BigNumberish],
    [string[]],
    "view"
  >;

  getCompensatorsCount: TypedContractMethod<[], [bigint], "view">;

  hasCompensator: TypedContractMethod<[owner: AddressLike], [boolean], "view">;

  ownerToCompensator: TypedContractMethod<
    [owner: AddressLike],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "COMPOUND_GOVERNOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "COMP_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "compensators"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "createCompensator"
  ): TypedContractMethod<[owner: AddressLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "createCompensatorForSelf"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "getCompensator"
  ): TypedContractMethod<[owner: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getCompensators"
  ): TypedContractMethod<
    [offset: BigNumberish, limit: BigNumberish],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCompensatorsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasCompensator"
  ): TypedContractMethod<[owner: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "ownerToCompensator"
  ): TypedContractMethod<[owner: AddressLike], [string], "view">;

  getEvent(
    key: "CompensatorCreated"
  ): TypedContractEvent<
    CompensatorCreatedEvent.InputTuple,
    CompensatorCreatedEvent.OutputTuple,
    CompensatorCreatedEvent.OutputObject
  >;

  filters: {
    "CompensatorCreated(address,address)": TypedContractEvent<
      CompensatorCreatedEvent.InputTuple,
      CompensatorCreatedEvent.OutputTuple,
      CompensatorCreatedEvent.OutputObject
    >;
    CompensatorCreated: TypedContractEvent<
      CompensatorCreatedEvent.InputTuple,
      CompensatorCreatedEvent.OutputTuple,
      CompensatorCreatedEvent.OutputObject
    >;
  };
}
