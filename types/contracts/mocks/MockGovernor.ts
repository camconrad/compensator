/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface MockGovernorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "castVote"
      | "createProposal"
      | "hasVoted"
      | "mockHasVoted"
      | "mockProposalVotes"
      | "proposalSnapshot"
      | "proposalSnapshots"
      | "proposalStates"
      | "proposalVotes"
      | "setProposalSnapshot"
      | "setProposalState"
      | "state"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "castVote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createProposal",
    values: [AddressLike[], BigNumberish[], string[], BytesLike[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mockHasVoted",
    values: [BigNumberish, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "mockProposalVotes",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalSnapshot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalSnapshots",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalStates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalVotes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProposalSnapshot",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProposalState",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "state", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mockHasVoted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockProposalVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalSnapshot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalSnapshots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalStates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProposalSnapshot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProposalState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
}

export interface MockGovernor extends BaseContract {
  connect(runner?: ContractRunner | null): MockGovernor;
  waitForDeployment(): Promise<this>;

  interface: MockGovernorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  castVote: TypedContractMethod<
    [proposalId: BigNumberish, support: BigNumberish],
    [void],
    "nonpayable"
  >;

  createProposal: TypedContractMethod<
    [
      arg0: AddressLike[],
      arg1: BigNumberish[],
      arg2: string[],
      arg3: BytesLike[],
      arg4: string
    ],
    [bigint],
    "nonpayable"
  >;

  hasVoted: TypedContractMethod<
    [proposalId: BigNumberish, account: AddressLike],
    [boolean],
    "view"
  >;

  mockHasVoted: TypedContractMethod<
    [proposalId: BigNumberish, account: AddressLike, voted: boolean],
    [void],
    "nonpayable"
  >;

  mockProposalVotes: TypedContractMethod<
    [
      proposalId: BigNumberish,
      _forVotes: BigNumberish,
      _againstVotes: BigNumberish,
      _abstainVotes: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  proposalSnapshot: TypedContractMethod<
    [proposalId: BigNumberish],
    [bigint],
    "view"
  >;

  proposalSnapshots: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  proposalStates: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  proposalVotes: TypedContractMethod<
    [proposalId: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        againstVotes_: bigint;
        forVotes_: bigint;
        abstainVotes_: bigint;
      }
    ],
    "view"
  >;

  setProposalSnapshot: TypedContractMethod<
    [proposalId: BigNumberish, snapshot: BigNumberish],
    [void],
    "nonpayable"
  >;

  setProposalState: TypedContractMethod<
    [proposalId: BigNumberish, newState: BigNumberish],
    [void],
    "nonpayable"
  >;

  state: TypedContractMethod<[proposalId: BigNumberish], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "castVote"
  ): TypedContractMethod<
    [proposalId: BigNumberish, support: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createProposal"
  ): TypedContractMethod<
    [
      arg0: AddressLike[],
      arg1: BigNumberish[],
      arg2: string[],
      arg3: BytesLike[],
      arg4: string
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasVoted"
  ): TypedContractMethod<
    [proposalId: BigNumberish, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "mockHasVoted"
  ): TypedContractMethod<
    [proposalId: BigNumberish, account: AddressLike, voted: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mockProposalVotes"
  ): TypedContractMethod<
    [
      proposalId: BigNumberish,
      _forVotes: BigNumberish,
      _againstVotes: BigNumberish,
      _abstainVotes: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "proposalSnapshot"
  ): TypedContractMethod<[proposalId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposalSnapshots"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposalStates"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposalVotes"
  ): TypedContractMethod<
    [proposalId: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        againstVotes_: bigint;
        forVotes_: bigint;
        abstainVotes_: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setProposalSnapshot"
  ): TypedContractMethod<
    [proposalId: BigNumberish, snapshot: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProposalState"
  ): TypedContractMethod<
    [proposalId: BigNumberish, newState: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "state"
  ): TypedContractMethod<[proposalId: BigNumberish], [bigint], "view">;

  filters: {};
}
