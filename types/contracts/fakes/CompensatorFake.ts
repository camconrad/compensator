/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface CompensatorFakeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BASIS_POINTS"
      | "COMPOUND_GOVERNOR"
      | "COMP_TOKEN"
      | "DELEGATION_CAP_PERCENT"
      | "LOCK_PERIOD"
      | "REWARD_PRECISION"
      | "activeProposals"
      | "availableRewards"
      | "balanceOf"
      | "claimRewards"
      | "delegateVotingPower"
      | "delegatedVotingPower"
      | "delegationCap"
      | "emergencyMode"
      | "emergencyWithdraw"
      | "emergencyWithdrawalAddress"
      | "functionPaused"
      | "getPendingRewards"
      | "isUserLocked"
      | "lastRewarded"
      | "maxGasLimit"
      | "minGasLimit"
      | "owner"
      | "ownerDeposit"
      | "ownerWithdraw"
      | "paused"
      | "proposalCreationTimes"
      | "proposalStakes"
      | "renounceOwnership"
      | "revokeVotingPowerDelegation"
      | "rewardIndex"
      | "rewardRate"
      | "rewardsUntil"
      | "setEmergencyMode"
      | "setFunctionPaused"
      | "setGasLimits"
      | "setPaused"
      | "setProposalActive"
      | "setProposalCreationTime"
      | "setRewardRate"
      | "simulateFailure"
      | "simulateGasConsumption"
      | "stakeOnProposal"
      | "startRewardIndex"
      | "totalPendingRewards"
      | "transferOwnership"
      | "unclaimedRewards"
      | "userDelegations"
      | "userDeposit"
      | "userTotalProposalStakes"
      | "userWithdraw"
      | "withdrawProposalStake"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DelegationCapUpdated"
      | "OwnershipTransferred"
      | "ProposalStakeWithdrawn"
      | "ProposalStaked"
      | "RewardRateSet"
      | "RewardsDeposited"
      | "RewardsWithdrawn"
      | "UserDeposit"
      | "UserWithdraw"
      | "VotingPowerDelegated"
      | "VotingPowerDelegationRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BASIS_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COMPOUND_GOVERNOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COMP_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DELEGATION_CAP_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LOCK_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REWARD_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activeProposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "availableRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateVotingPower",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delegatedVotingPower",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegationCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawalAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "functionPaused",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isUserLocked",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastRewarded",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposalCreationTimes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalStakes",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeVotingPowerDelegation",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsUntil",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergencyMode",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setFunctionPaused",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setGasLimits",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setPaused", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setProposalActive",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setProposalCreationTime",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "simulateFailure",
    values: [boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "simulateGasConsumption",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeOnProposal",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startRewardIndex",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalPendingRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unclaimedRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userDelegations",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userTotalProposalStakes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawProposalStake",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASIS_POINTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COMPOUND_GOVERNOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "COMP_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DELEGATION_CAP_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LOCK_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REWARD_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "availableRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateVotingPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegatedVotingPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegationCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawalAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "functionPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUserLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRewarded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalCreationTimes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalStakes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeVotingPowerDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardsUntil",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFunctionPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGasLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setProposalActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProposalCreationTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "simulateFailure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "simulateGasConsumption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeOnProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startRewardIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unclaimedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userDelegations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userTotalProposalStakes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawProposalStake",
    data: BytesLike
  ): Result;
}

export namespace DelegationCapUpdatedEvent {
  export type InputTuple = [
    oldCap: BigNumberish,
    newCap: BigNumberish,
    totalSupply: BigNumberish
  ];
  export type OutputTuple = [
    oldCap: bigint,
    newCap: bigint,
    totalSupply: bigint
  ];
  export interface OutputObject {
    oldCap: bigint;
    newCap: bigint;
    totalSupply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalStakeWithdrawnEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    user: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [proposalId: bigint, user: string, amount: bigint];
  export interface OutputObject {
    proposalId: bigint;
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalStakedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    user: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [proposalId: bigint, user: string, amount: bigint];
  export interface OutputObject {
    proposalId: bigint;
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardRateSetEvent {
  export type InputTuple = [oldRate: BigNumberish, newRate: BigNumberish];
  export type OutputTuple = [oldRate: bigint, newRate: bigint];
  export interface OutputObject {
    oldRate: bigint;
    newRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsDepositedEvent {
  export type InputTuple = [from: AddressLike, amount: BigNumberish];
  export type OutputTuple = [from: string, amount: bigint];
  export interface OutputObject {
    from: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsWithdrawnEvent {
  export type InputTuple = [to: AddressLike, amount: BigNumberish];
  export type OutputTuple = [to: string, amount: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserDepositEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserWithdrawEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingPowerDelegatedEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, amount: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingPowerDelegationRevokedEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, amount: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CompensatorFake extends BaseContract {
  connect(runner?: ContractRunner | null): CompensatorFake;
  waitForDeployment(): Promise<this>;

  interface: CompensatorFakeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BASIS_POINTS: TypedContractMethod<[], [bigint], "view">;

  COMPOUND_GOVERNOR: TypedContractMethod<[], [string], "view">;

  COMP_TOKEN: TypedContractMethod<[], [string], "view">;

  DELEGATION_CAP_PERCENT: TypedContractMethod<[], [bigint], "view">;

  LOCK_PERIOD: TypedContractMethod<[], [bigint], "view">;

  REWARD_PRECISION: TypedContractMethod<[], [bigint], "view">;

  activeProposals: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  availableRewards: TypedContractMethod<[], [bigint], "view">;

  balanceOf: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  claimRewards: TypedContractMethod<[user: AddressLike], [void], "nonpayable">;

  delegateVotingPower: TypedContractMethod<
    [delegatee: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  delegatedVotingPower: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  delegationCap: TypedContractMethod<[], [bigint], "view">;

  emergencyMode: TypedContractMethod<[], [boolean], "view">;

  emergencyWithdraw: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  emergencyWithdrawalAddress: TypedContractMethod<[], [string], "view">;

  functionPaused: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  getPendingRewards: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  isUserLocked: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  lastRewarded: TypedContractMethod<[], [bigint], "view">;

  maxGasLimit: TypedContractMethod<[], [bigint], "view">;

  minGasLimit: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerDeposit: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  ownerWithdraw: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  paused: TypedContractMethod<[], [boolean], "view">;

  proposalCreationTimes: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  proposalStakes: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  revokeVotingPowerDelegation: TypedContractMethod<
    [delegatee: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  rewardIndex: TypedContractMethod<[], [bigint], "view">;

  rewardRate: TypedContractMethod<[], [bigint], "view">;

  rewardsUntil: TypedContractMethod<[], [bigint], "view">;

  setEmergencyMode: TypedContractMethod<
    [_emergencyMode: boolean],
    [void],
    "nonpayable"
  >;

  setFunctionPaused: TypedContractMethod<
    [functionSelector: BytesLike, _paused: boolean],
    [void],
    "nonpayable"
  >;

  setGasLimits: TypedContractMethod<
    [_minGasLimit: BigNumberish, _maxGasLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPaused: TypedContractMethod<[_paused: boolean], [void], "nonpayable">;

  setProposalActive: TypedContractMethod<
    [proposalId: BigNumberish, active: boolean],
    [void],
    "nonpayable"
  >;

  setProposalCreationTime: TypedContractMethod<
    [proposalId: BigNumberish, creationTime: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRewardRate: TypedContractMethod<
    [newRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  simulateFailure: TypedContractMethod<
    [shouldFail: boolean, reason: string],
    [void],
    "view"
  >;

  simulateGasConsumption: TypedContractMethod<
    [gasToConsume: BigNumberish],
    [void],
    "view"
  >;

  stakeOnProposal: TypedContractMethod<
    [proposalId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  startRewardIndex: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  totalPendingRewards: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unclaimedRewards: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  userDelegations: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  userDeposit: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  userTotalProposalStakes: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  userWithdraw: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawProposalStake: TypedContractMethod<
    [proposalId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BASIS_POINTS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "COMPOUND_GOVERNOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "COMP_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DELEGATION_CAP_PERCENT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LOCK_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REWARD_PRECISION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "activeProposals"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "availableRewards"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimRewards"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "delegateVotingPower"
  ): TypedContractMethod<
    [delegatee: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "delegatedVotingPower"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "delegationCap"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "emergencyMode"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdrawalAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "functionPaused"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getPendingRewards"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "isUserLocked"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "lastRewarded"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxGasLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minGasLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerDeposit"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ownerWithdraw"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "proposalCreationTimes"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposalStakes"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeVotingPowerDelegation"
  ): TypedContractMethod<
    [delegatee: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rewardIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewardRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewardsUntil"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setEmergencyMode"
  ): TypedContractMethod<[_emergencyMode: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFunctionPaused"
  ): TypedContractMethod<
    [functionSelector: BytesLike, _paused: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setGasLimits"
  ): TypedContractMethod<
    [_minGasLimit: BigNumberish, _maxGasLimit: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPaused"
  ): TypedContractMethod<[_paused: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setProposalActive"
  ): TypedContractMethod<
    [proposalId: BigNumberish, active: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProposalCreationTime"
  ): TypedContractMethod<
    [proposalId: BigNumberish, creationTime: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRewardRate"
  ): TypedContractMethod<[newRate: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "simulateFailure"
  ): TypedContractMethod<[shouldFail: boolean, reason: string], [void], "view">;
  getFunction(
    nameOrSignature: "simulateGasConsumption"
  ): TypedContractMethod<[gasToConsume: BigNumberish], [void], "view">;
  getFunction(
    nameOrSignature: "stakeOnProposal"
  ): TypedContractMethod<
    [proposalId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "startRewardIndex"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalPendingRewards"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unclaimedRewards"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "userDelegations"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "userDeposit"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userTotalProposalStakes"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "userWithdraw"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawProposalStake"
  ): TypedContractMethod<
    [proposalId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "DelegationCapUpdated"
  ): TypedContractEvent<
    DelegationCapUpdatedEvent.InputTuple,
    DelegationCapUpdatedEvent.OutputTuple,
    DelegationCapUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProposalStakeWithdrawn"
  ): TypedContractEvent<
    ProposalStakeWithdrawnEvent.InputTuple,
    ProposalStakeWithdrawnEvent.OutputTuple,
    ProposalStakeWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "ProposalStaked"
  ): TypedContractEvent<
    ProposalStakedEvent.InputTuple,
    ProposalStakedEvent.OutputTuple,
    ProposalStakedEvent.OutputObject
  >;
  getEvent(
    key: "RewardRateSet"
  ): TypedContractEvent<
    RewardRateSetEvent.InputTuple,
    RewardRateSetEvent.OutputTuple,
    RewardRateSetEvent.OutputObject
  >;
  getEvent(
    key: "RewardsDeposited"
  ): TypedContractEvent<
    RewardsDepositedEvent.InputTuple,
    RewardsDepositedEvent.OutputTuple,
    RewardsDepositedEvent.OutputObject
  >;
  getEvent(
    key: "RewardsWithdrawn"
  ): TypedContractEvent<
    RewardsWithdrawnEvent.InputTuple,
    RewardsWithdrawnEvent.OutputTuple,
    RewardsWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "UserDeposit"
  ): TypedContractEvent<
    UserDepositEvent.InputTuple,
    UserDepositEvent.OutputTuple,
    UserDepositEvent.OutputObject
  >;
  getEvent(
    key: "UserWithdraw"
  ): TypedContractEvent<
    UserWithdrawEvent.InputTuple,
    UserWithdrawEvent.OutputTuple,
    UserWithdrawEvent.OutputObject
  >;
  getEvent(
    key: "VotingPowerDelegated"
  ): TypedContractEvent<
    VotingPowerDelegatedEvent.InputTuple,
    VotingPowerDelegatedEvent.OutputTuple,
    VotingPowerDelegatedEvent.OutputObject
  >;
  getEvent(
    key: "VotingPowerDelegationRevoked"
  ): TypedContractEvent<
    VotingPowerDelegationRevokedEvent.InputTuple,
    VotingPowerDelegationRevokedEvent.OutputTuple,
    VotingPowerDelegationRevokedEvent.OutputObject
  >;

  filters: {
    "DelegationCapUpdated(uint256,uint256,uint256)": TypedContractEvent<
      DelegationCapUpdatedEvent.InputTuple,
      DelegationCapUpdatedEvent.OutputTuple,
      DelegationCapUpdatedEvent.OutputObject
    >;
    DelegationCapUpdated: TypedContractEvent<
      DelegationCapUpdatedEvent.InputTuple,
      DelegationCapUpdatedEvent.OutputTuple,
      DelegationCapUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProposalStakeWithdrawn(uint256,address,uint256)": TypedContractEvent<
      ProposalStakeWithdrawnEvent.InputTuple,
      ProposalStakeWithdrawnEvent.OutputTuple,
      ProposalStakeWithdrawnEvent.OutputObject
    >;
    ProposalStakeWithdrawn: TypedContractEvent<
      ProposalStakeWithdrawnEvent.InputTuple,
      ProposalStakeWithdrawnEvent.OutputTuple,
      ProposalStakeWithdrawnEvent.OutputObject
    >;

    "ProposalStaked(uint256,address,uint256)": TypedContractEvent<
      ProposalStakedEvent.InputTuple,
      ProposalStakedEvent.OutputTuple,
      ProposalStakedEvent.OutputObject
    >;
    ProposalStaked: TypedContractEvent<
      ProposalStakedEvent.InputTuple,
      ProposalStakedEvent.OutputTuple,
      ProposalStakedEvent.OutputObject
    >;

    "RewardRateSet(uint256,uint256)": TypedContractEvent<
      RewardRateSetEvent.InputTuple,
      RewardRateSetEvent.OutputTuple,
      RewardRateSetEvent.OutputObject
    >;
    RewardRateSet: TypedContractEvent<
      RewardRateSetEvent.InputTuple,
      RewardRateSetEvent.OutputTuple,
      RewardRateSetEvent.OutputObject
    >;

    "RewardsDeposited(address,uint256)": TypedContractEvent<
      RewardsDepositedEvent.InputTuple,
      RewardsDepositedEvent.OutputTuple,
      RewardsDepositedEvent.OutputObject
    >;
    RewardsDeposited: TypedContractEvent<
      RewardsDepositedEvent.InputTuple,
      RewardsDepositedEvent.OutputTuple,
      RewardsDepositedEvent.OutputObject
    >;

    "RewardsWithdrawn(address,uint256)": TypedContractEvent<
      RewardsWithdrawnEvent.InputTuple,
      RewardsWithdrawnEvent.OutputTuple,
      RewardsWithdrawnEvent.OutputObject
    >;
    RewardsWithdrawn: TypedContractEvent<
      RewardsWithdrawnEvent.InputTuple,
      RewardsWithdrawnEvent.OutputTuple,
      RewardsWithdrawnEvent.OutputObject
    >;

    "UserDeposit(address,uint256)": TypedContractEvent<
      UserDepositEvent.InputTuple,
      UserDepositEvent.OutputTuple,
      UserDepositEvent.OutputObject
    >;
    UserDeposit: TypedContractEvent<
      UserDepositEvent.InputTuple,
      UserDepositEvent.OutputTuple,
      UserDepositEvent.OutputObject
    >;

    "UserWithdraw(address,uint256)": TypedContractEvent<
      UserWithdrawEvent.InputTuple,
      UserWithdrawEvent.OutputTuple,
      UserWithdrawEvent.OutputObject
    >;
    UserWithdraw: TypedContractEvent<
      UserWithdrawEvent.InputTuple,
      UserWithdrawEvent.OutputTuple,
      UserWithdrawEvent.OutputObject
    >;

    "VotingPowerDelegated(address,address,uint256)": TypedContractEvent<
      VotingPowerDelegatedEvent.InputTuple,
      VotingPowerDelegatedEvent.OutputTuple,
      VotingPowerDelegatedEvent.OutputObject
    >;
    VotingPowerDelegated: TypedContractEvent<
      VotingPowerDelegatedEvent.InputTuple,
      VotingPowerDelegatedEvent.OutputTuple,
      VotingPowerDelegatedEvent.OutputObject
    >;

    "VotingPowerDelegationRevoked(address,address,uint256)": TypedContractEvent<
      VotingPowerDelegationRevokedEvent.InputTuple,
      VotingPowerDelegationRevokedEvent.OutputTuple,
      VotingPowerDelegationRevokedEvent.OutputObject
    >;
    VotingPowerDelegationRevoked: TypedContractEvent<
      VotingPowerDelegationRevokedEvent.InputTuple,
      VotingPowerDelegationRevokedEvent.OutputTuple,
      VotingPowerDelegationRevokedEvent.OutputObject
    >;
  };
}
