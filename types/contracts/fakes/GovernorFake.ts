/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface GovernorFakeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ABSTAIN"
      | "AGAINST"
      | "COMP_TOKEN"
      | "FOR"
      | "cancel"
      | "castVote"
      | "execute"
      | "getCurrentVotesWithFailure"
      | "getRawProposalState"
      | "maxVotingPeriod"
      | "minVotingPeriod"
      | "pauser"
      | "proposalCount"
      | "proposalCreationPaused"
      | "proposalStates"
      | "proposals"
      | "propose"
      | "quorumVotes"
      | "setProposalCreationPaused"
      | "setProposalState"
      | "setVotingPaused"
      | "state"
      | "votingPaused"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ProposalCanceled"
      | "ProposalCreated"
      | "ProposalCreationPaused"
      | "ProposalExecuted"
      | "VoteCast"
      | "VotingPaused"
  ): EventFragment;

  encodeFunctionData(functionFragment: "ABSTAIN", values?: undefined): string;
  encodeFunctionData(functionFragment: "AGAINST", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "COMP_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "FOR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentVotesWithFailure",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getRawProposalState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxVotingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minVotingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pauser", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalCreationPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalStates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "propose",
    values: [AddressLike[], BigNumberish[], string[], BytesLike[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "quorumVotes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setProposalCreationPaused",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setProposalState",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVotingPaused",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "state", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "votingPaused",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "ABSTAIN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "AGAINST", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "COMP_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "FOR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentVotesWithFailure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRawProposalState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxVotingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minVotingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pauser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalCreationPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalStates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quorumVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProposalCreationPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProposalState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVotingPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingPaused",
    data: BytesLike
  ): Result;
}

export namespace ProposalCanceledEvent {
  export type InputTuple = [proposalId: BigNumberish];
  export type OutputTuple = [proposalId: bigint];
  export interface OutputObject {
    proposalId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalCreatedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    proposer: AddressLike,
    targets: AddressLike[],
    values: BigNumberish[],
    signatures: string[],
    calldatas: BytesLike[],
    startBlock: BigNumberish,
    endBlock: BigNumberish,
    description: string
  ];
  export type OutputTuple = [
    proposalId: bigint,
    proposer: string,
    targets: string[],
    values: bigint[],
    signatures: string[],
    calldatas: string[],
    startBlock: bigint,
    endBlock: bigint,
    description: string
  ];
  export interface OutputObject {
    proposalId: bigint;
    proposer: string;
    targets: string[];
    values: bigint[];
    signatures: string[];
    calldatas: string[];
    startBlock: bigint;
    endBlock: bigint;
    description: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalCreationPausedEvent {
  export type InputTuple = [by: AddressLike, paused: boolean];
  export type OutputTuple = [by: string, paused: boolean];
  export interface OutputObject {
    by: string;
    paused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalExecutedEvent {
  export type InputTuple = [proposalId: BigNumberish];
  export type OutputTuple = [proposalId: bigint];
  export interface OutputObject {
    proposalId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    voter: AddressLike,
    proposalId: BigNumberish,
    support: BigNumberish,
    weight: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [
    voter: string,
    proposalId: bigint,
    support: bigint,
    weight: bigint,
    reason: string
  ];
  export interface OutputObject {
    voter: string;
    proposalId: bigint;
    support: bigint;
    weight: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingPausedEvent {
  export type InputTuple = [by: AddressLike, paused: boolean];
  export type OutputTuple = [by: string, paused: boolean];
  export interface OutputObject {
    by: string;
    paused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GovernorFake extends BaseContract {
  connect(runner?: ContractRunner | null): GovernorFake;
  waitForDeployment(): Promise<this>;

  interface: GovernorFakeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ABSTAIN: TypedContractMethod<[], [bigint], "view">;

  AGAINST: TypedContractMethod<[], [bigint], "view">;

  COMP_TOKEN: TypedContractMethod<[], [string], "view">;

  FOR: TypedContractMethod<[], [bigint], "view">;

  cancel: TypedContractMethod<[proposalId: BigNumberish], [void], "nonpayable">;

  castVote: TypedContractMethod<
    [proposalId: BigNumberish, support: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;

  execute: TypedContractMethod<
    [proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getCurrentVotesWithFailure: TypedContractMethod<
    [voter: AddressLike, shouldFail: boolean],
    [bigint],
    "view"
  >;

  getRawProposalState: TypedContractMethod<
    [proposalId: BigNumberish],
    [bigint],
    "view"
  >;

  maxVotingPeriod: TypedContractMethod<[], [bigint], "view">;

  minVotingPeriod: TypedContractMethod<[], [bigint], "view">;

  pauser: TypedContractMethod<[], [string], "view">;

  proposalCount: TypedContractMethod<[], [bigint], "view">;

  proposalCreationPaused: TypedContractMethod<[], [boolean], "view">;

  proposalStates: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  proposals: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, boolean, boolean, bigint, bigint, bigint] & {
        proposer: string;
        startBlock: bigint;
        endBlock: bigint;
        canceled: boolean;
        executed: boolean;
        forVotes: bigint;
        againstVotes: bigint;
        abstainVotes: bigint;
      }
    ],
    "view"
  >;

  propose: TypedContractMethod<
    [
      targets: AddressLike[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: BytesLike[],
      description: string
    ],
    [bigint],
    "nonpayable"
  >;

  quorumVotes: TypedContractMethod<[], [bigint], "view">;

  setProposalCreationPaused: TypedContractMethod<
    [paused: boolean],
    [void],
    "nonpayable"
  >;

  setProposalState: TypedContractMethod<
    [proposalId: BigNumberish, newState: BigNumberish],
    [void],
    "nonpayable"
  >;

  setVotingPaused: TypedContractMethod<[paused: boolean], [void], "nonpayable">;

  state: TypedContractMethod<[proposalId: BigNumberish], [bigint], "view">;

  votingPaused: TypedContractMethod<[], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ABSTAIN"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "AGAINST"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "COMP_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "FOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "cancel"
  ): TypedContractMethod<[proposalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "castVote"
  ): TypedContractMethod<
    [proposalId: BigNumberish, support: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<[proposalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getCurrentVotesWithFailure"
  ): TypedContractMethod<
    [voter: AddressLike, shouldFail: boolean],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRawProposalState"
  ): TypedContractMethod<[proposalId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxVotingPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minVotingPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pauser"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proposalCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposalCreationPaused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "proposalStates"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposals"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, boolean, boolean, bigint, bigint, bigint] & {
        proposer: string;
        startBlock: bigint;
        endBlock: bigint;
        canceled: boolean;
        executed: boolean;
        forVotes: bigint;
        againstVotes: bigint;
        abstainVotes: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "propose"
  ): TypedContractMethod<
    [
      targets: AddressLike[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: BytesLike[],
      description: string
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "quorumVotes"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setProposalCreationPaused"
  ): TypedContractMethod<[paused: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setProposalState"
  ): TypedContractMethod<
    [proposalId: BigNumberish, newState: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setVotingPaused"
  ): TypedContractMethod<[paused: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "state"
  ): TypedContractMethod<[proposalId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "votingPaused"
  ): TypedContractMethod<[], [boolean], "view">;

  getEvent(
    key: "ProposalCanceled"
  ): TypedContractEvent<
    ProposalCanceledEvent.InputTuple,
    ProposalCanceledEvent.OutputTuple,
    ProposalCanceledEvent.OutputObject
  >;
  getEvent(
    key: "ProposalCreated"
  ): TypedContractEvent<
    ProposalCreatedEvent.InputTuple,
    ProposalCreatedEvent.OutputTuple,
    ProposalCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalCreationPaused"
  ): TypedContractEvent<
    ProposalCreationPausedEvent.InputTuple,
    ProposalCreationPausedEvent.OutputTuple,
    ProposalCreationPausedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalExecuted"
  ): TypedContractEvent<
    ProposalExecutedEvent.InputTuple,
    ProposalExecutedEvent.OutputTuple,
    ProposalExecutedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;
  getEvent(
    key: "VotingPaused"
  ): TypedContractEvent<
    VotingPausedEvent.InputTuple,
    VotingPausedEvent.OutputTuple,
    VotingPausedEvent.OutputObject
  >;

  filters: {
    "ProposalCanceled(uint256)": TypedContractEvent<
      ProposalCanceledEvent.InputTuple,
      ProposalCanceledEvent.OutputTuple,
      ProposalCanceledEvent.OutputObject
    >;
    ProposalCanceled: TypedContractEvent<
      ProposalCanceledEvent.InputTuple,
      ProposalCanceledEvent.OutputTuple,
      ProposalCanceledEvent.OutputObject
    >;

    "ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string)": TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;
    ProposalCreated: TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;

    "ProposalCreationPaused(address,bool)": TypedContractEvent<
      ProposalCreationPausedEvent.InputTuple,
      ProposalCreationPausedEvent.OutputTuple,
      ProposalCreationPausedEvent.OutputObject
    >;
    ProposalCreationPaused: TypedContractEvent<
      ProposalCreationPausedEvent.InputTuple,
      ProposalCreationPausedEvent.OutputTuple,
      ProposalCreationPausedEvent.OutputObject
    >;

    "ProposalExecuted(uint256)": TypedContractEvent<
      ProposalExecutedEvent.InputTuple,
      ProposalExecutedEvent.OutputTuple,
      ProposalExecutedEvent.OutputObject
    >;
    ProposalExecuted: TypedContractEvent<
      ProposalExecutedEvent.InputTuple,
      ProposalExecutedEvent.OutputTuple,
      ProposalExecutedEvent.OutputObject
    >;

    "VoteCast(address,uint256,uint8,uint256,string)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;

    "VotingPaused(address,bool)": TypedContractEvent<
      VotingPausedEvent.InputTuple,
      VotingPausedEvent.OutputTuple,
      VotingPausedEvent.OutputObject
    >;
    VotingPaused: TypedContractEvent<
      VotingPausedEvent.InputTuple,
      VotingPausedEvent.OutputTuple,
      VotingPausedEvent.OutputObject
    >;
  };
}
