/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ICompensator {
  export type DelegateInfoStruct = {
    successfulVotes: BigNumberish;
    totalVotes: BigNumberish;
    totalRewardsEarned: BigNumberish;
    totalVotingPowerUsed: BigNumberish;
    averageVotingPowerPerVote: BigNumberish;
  };

  export type DelegateInfoStructOutput = [
    successfulVotes: bigint,
    totalVotes: bigint,
    totalRewardsEarned: bigint,
    totalVotingPowerUsed: bigint,
    averageVotingPowerPerVote: bigint
  ] & {
    successfulVotes: bigint;
    totalVotes: bigint;
    totalRewardsEarned: bigint;
    totalVotingPowerUsed: bigint;
    averageVotingPowerPerVote: bigint;
  };
}

export interface ICompensatorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "castVote(uint256,uint8,string)"
      | "castVote(uint256,uint8)"
      | "delegateInfo"
      | "getContractVotingPower"
      | "getVoteByIndex"
      | "getVoteInfo"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "VoteCast"): EventFragment;

  encodeFunctionData(
    functionFragment: "castVote(uint256,uint8,string)",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "castVote(uint256,uint8)",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractVotingPower",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVoteByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoteInfo",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "castVote(uint256,uint8,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castVote(uint256,uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractVotingPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoteByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoteInfo",
    data: BytesLike
  ): Result;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    support: BigNumberish,
    blockNumber: BigNumberish,
    txHash: BytesLike,
    votingPower: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [
    proposalId: bigint,
    support: bigint,
    blockNumber: bigint,
    txHash: string,
    votingPower: bigint,
    reason: string
  ];
  export interface OutputObject {
    proposalId: bigint;
    support: bigint;
    blockNumber: bigint;
    txHash: string;
    votingPower: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ICompensator extends BaseContract {
  connect(runner?: ContractRunner | null): ICompensator;
  waitForDeployment(): Promise<this>;

  interface: ICompensatorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  "castVote(uint256,uint8,string)": TypedContractMethod<
    [proposalId: BigNumberish, support: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;

  "castVote(uint256,uint8)": TypedContractMethod<
    [proposalId: BigNumberish, support: BigNumberish],
    [void],
    "nonpayable"
  >;

  delegateInfo: TypedContractMethod<
    [],
    [ICompensator.DelegateInfoStructOutput],
    "view"
  >;

  getContractVotingPower: TypedContractMethod<[], [bigint], "view">;

  getVoteByIndex: TypedContractMethod<
    [voteIndex: BigNumberish],
    [
      [bigint, bigint, string, bigint, bigint, string] & {
        direction: bigint;
        blockNumber: bigint;
        txHash: string;
        timestamp: bigint;
        votingPower: bigint;
        reason: string;
      }
    ],
    "view"
  >;

  getVoteInfo: TypedContractMethod<
    [proposalId: BigNumberish],
    [
      [bigint, bigint, string, bigint, bigint, string] & {
        direction: bigint;
        blockNumber: bigint;
        txHash: string;
        timestamp: bigint;
        votingPower: bigint;
        reason: string;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "castVote(uint256,uint8,string)"
  ): TypedContractMethod<
    [proposalId: BigNumberish, support: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castVote(uint256,uint8)"
  ): TypedContractMethod<
    [proposalId: BigNumberish, support: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "delegateInfo"
  ): TypedContractMethod<[], [ICompensator.DelegateInfoStructOutput], "view">;
  getFunction(
    nameOrSignature: "getContractVotingPower"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVoteByIndex"
  ): TypedContractMethod<
    [voteIndex: BigNumberish],
    [
      [bigint, bigint, string, bigint, bigint, string] & {
        direction: bigint;
        blockNumber: bigint;
        txHash: string;
        timestamp: bigint;
        votingPower: bigint;
        reason: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVoteInfo"
  ): TypedContractMethod<
    [proposalId: BigNumberish],
    [
      [bigint, bigint, string, bigint, bigint, string] & {
        direction: bigint;
        blockNumber: bigint;
        txHash: string;
        timestamp: bigint;
        votingPower: bigint;
        reason: string;
      }
    ],
    "view"
  >;

  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;

  filters: {
    "VoteCast(uint256,uint8,uint256,bytes32,uint256,string)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
  };
}
